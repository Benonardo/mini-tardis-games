var searchIndex = new Map(JSON.parse('[\
["mtg_bad_apple",{"doc":"","t":"HHHHHHH","n":["mtg_alloc_data","mtg_draw","mtg_draw_background","mtg_on_click","mtg_screen_close","mtg_screen_open","mtg_screen_tick"],"q":[[0,"mtg_bad_apple"]],"d":["","","","","","",""],"i":[0,0,0,0,0,0,0],"f":[[[],1],[1,2],[1,2],[[1,1,1,1],2],[1,2],[1,2],[1,2]],"c":[],"p":[[1,"i32"],[1,"tuple"]],"b":[]}],\
["mtg_counter",{"doc":"","t":"HHHHHHH","n":["mtg_alloc_data","mtg_draw","mtg_draw_background","mtg_on_click","mtg_screen_close","mtg_screen_open","mtg_screen_tick"],"q":[[0,"mtg_counter"]],"d":["","","","","","",""],"i":[0,0,0,0,0,0,0],"f":[[[],1],[1,2],[1,2],[[1,1,1,1],2],[1,2],[1,2],[1,2]],"c":[],"p":[[1,"i32"],[1,"tuple"]],"b":[]}],\
["mtg_rust",{"doc":"The rust crate for the Mini Tardis Games addon of the …","t":"PPFGPPKPPPGPPPPPPFGPPPPNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNQNHNNMNNNNNHHMNNNHNNNNNNNNNNNNNNNNNNNNNNNN","n":["Ambient","Blocks","Canvas","ClickType","Debug","Error","Game","Hostile","Info","Left","LogLevel","Master","Music","Neutral","Players","Records","Right","Screen","SoundCategory","Trace","Voice","Warn","Weather","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","close","cmp","draw","draw_background","draw_inbuilt_sprite","draw_text","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","game_impl","get_height","get_persistent_data","get_raw_color","get_width","initialize","into","into","into","into","into","log","nano_time","on_click","partial_cmp","play_sound","random_i32","save_persistent_data","screen_close","screen_open","screen_tick","set_pixel_argb","set_pixel_raw","set_pixel_rgb","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"mtg_rust"],[98,"core::cmp"],[99,"core::fmt"],[100,"core::fmt"],[101,"core::option"],[102,"core::result"],[103,"core::any"]],"d":["","","A canvas that can be manipulated via various methods and …","Indicates the type of a <code>Game::on_click</code> callback, usually …","","","","","","","A level of importance for the <code>log</code> function. Analogous to …","","","","","","","A (console) screen that contains methods that can be …","A category for a certain sound event, used by …","","","","","","","","","","","","","","","","","","","","","Closes this app/game. This function never returns due to …","","","","Draw a sprite at the certain <code>x</code> and <code>y</code> coordinates. …","Draw text at the certain <code>x</code> and <code>y</code> coordinates. Analogous to …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Connects a type implementing <code>Game</code> with the underlying WASM …","Get the height of the canvas, usually 96. Analogous to the …","","Get the raw color value at the certain <code>x</code> and <code>y</code> coordinates.","Get the width of the canvas, usually 128. Analogous to the …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Logs a message. Forwards to the mod’s SLF4J <code>Logger</code>’s …","Returns an arbitrary nanosecond value to measure elapsed …","","","Plays a sound at the screen’s position with the …","Returns a pseudorandom <code>i32</code> using the block entities’ …","","","","","Set the ARGB color value at the certain <code>x</code> and <code>y</code> …","Set the raw color value at the certain <code>x</code> and <code>y</code> coordinates.","Set the RGB color value at the certain <code>x</code> and <code>y</code> coordinates.","","","","","","","","","","","","","","","","","",""],"i":[2,2,0,0,1,1,0,2,1,3,0,2,2,2,2,2,3,0,0,1,2,1,2,5,9,1,2,3,5,9,1,2,3,1,2,3,1,2,3,5,1,8,8,9,9,1,2,3,1,2,3,5,9,1,2,3,0,9,0,9,9,8,5,9,1,2,3,0,0,8,1,5,5,0,8,8,8,9,9,9,1,2,3,5,9,1,2,3,5,9,1,2,3,5,9,1,2,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[5,6],[[1,1],7],[[8,5,9],4],[[8,5,9],4],[[9,10,10,11],4],[[9,10,10,11,10,10],4],[[1,1],12],[[2,2],12],[[3,3],12],[[1,13],14],[[2,13],14],[[3,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[9,10],[[],[[16,[15]]]],[[9,10,10],10],[9,10],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[11,1],4],[[],17],[[8,5,3,10,10],4],[[1,1],[[18,[7]]]],[[5,11,2,19,19],4],[5,10],[[[20,[15]]],4],[[8,5],4],[[8,5],4],[[8,5],4],[[9,10,10,10],4],[[9,10,10,10],4],[[9,10,10,10],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]]],"c":[],"p":[[6,"LogLevel",0],[6,"SoundCategory",0],[6,"ClickType",0],[1,"tuple"],[5,"Screen",0],[1,"never"],[6,"Ordering",98],[10,"Game",0],[5,"Canvas",0],[1,"i32"],[1,"str"],[1,"bool"],[5,"Formatter",99],[8,"Result",99],[1,"u8"],[5,"Vec",100],[1,"i64"],[6,"Option",101],[1,"f32"],[1,"slice"],[6,"Result",102],[5,"TypeId",103]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
