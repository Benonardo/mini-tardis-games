var searchIndex = new Map(JSON.parse('[\
["glam",{"doc":"glam","t":"","n":["EulerRot","FloatExt","Vec2Swizzles","Vec3Swizzles","Vec4Swizzles","XYZ","XZY","YXZ","YZX","ZXY","ZYX","bool","borrow","borrow_mut","clone","clone_into","default","eq","f32","f64","fmt","from","hash","i16","i32","i64","into","inverse_lerp","lerp","remap","swizzles","to_owned","try_from","try_into","type_id","u16","u32","u64","BVec2","BVec3","BVec3A","BVec4","BVec4A","FALSE","FALSE","FALSE","FALSE","FALSE","TRUE","TRUE","TRUE","TRUE","TRUE","all","all","all","all","all","any","any","any","any","any","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitmask","bitmask","bitmask","bitmask","bitmask","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","new","new","new","new","new","not","not","not","not","not","set","set","set","set","set","splat","splat","splat","splat","splat","test","test","test","test","test","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","w","w","x","x","x","x","x","y","y","y","y","y","z","z","z","z","AXES","AXES","AXES","AXES","Affine2","Affine3A","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","INFINITY","INFINITY","INFINITY","INFINITY","MAX","MAX","MAX","MAX","MIN","MIN","MIN","MIN","Mat2","Mat3","Mat3A","Mat4","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NEG_INFINITY","NEG_INFINITY","NEG_INFINITY","NEG_INFINITY","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","NEG_Z","ONE","ONE","ONE","ONE","Quat","Vec2","Vec3","Vec3A","Vec4","W","X","X","X","X","Y","Y","Y","Y","Z","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","abs","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat3","add_mat3","add_mat4","angle_between","angle_between","angle_between","angle_between","any_orthogonal_vector","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_pair","any_orthonormal_vector","any_orthonormal_vector","as_dmat2","as_dmat3","as_dmat3","as_dmat4","as_dquat","as_dvec2","as_dvec3","as_dvec3","as_dvec4","as_f64","as_i16vec2","as_i16vec3","as_i16vec3","as_i16vec4","as_i64vec2","as_i64vec3","as_i64vec3","as_i64vec4","as_ivec2","as_ivec3","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_u16vec2","as_u16vec3","as_u16vec3","as_u16vec4","as_u64vec2","as_u64vec3","as_u64vec3","as_u64vec4","as_uvec2","as_uvec3","as_uvec3","as_uvec4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","ceil","ceil","clamp","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cmpne","col","col","col","col","col_mut","col_mut","col_mut","col_mut","conjugate","copysign","copysign","copysign","copysign","cross","cross","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref_mut","deref_mut","determinant","determinant","determinant","determinant","distance","distance","distance","distance","distance_squared","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","dot","dot","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp","extend","extend","extend","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle_translation","from_array","from_array","from_array","from_array","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat3a","from_mat3a","from_mat3a","from_mat3a","from_mat4","from_mat4","from_mat4","from_mat4","from_quat","from_quat","from_quat","from_quat","from_rotation_arc","from_rotation_arc_2d","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_slice","from_slice","from_slice","from_slice","from_slice","from_translation","from_translation","from_translation","from_translation","from_translation","from_vec4","from_xyzw","index","index","index","index","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","length","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","lerp","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_to_lh","look_to_lh","look_to_rh","look_to_rh","mat2","mat3","mat3a","mat4","matrix2","matrix3","max","max","max","max","max_element","max_element","max_element","max_element","min","min","min","min","min_element","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat3","mul_mat3","mul_mat4","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec3","mul_vec3","mul_vec3","mul_vec3a","mul_vec3a","mul_vec3a","mul_vec4","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","normalize","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","orthographic_lh","orthographic_rh","orthographic_rh_gl","perp","perp_dot","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_lh","perspective_rh","perspective_rh_gl","powf","powf","powf","powf","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","quat","recip","recip","recip","recip","reject_from","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rotate","round","round","round","round","row","row","row","row","select","select","select","select","signum","signum","signum","signum","slerp","splat","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat3","sub_mat3","sub_mat4","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","to_angle","to_array","to_array","to_array","to_array","to_array","to_axis_angle","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_angle_translation","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point2","transform_point3","transform_point3","transform_point3a","transform_point3a","transform_vector2","transform_vector2","transform_vector2","transform_vector3","transform_vector3","transform_vector3a","transform_vector3a","translation","translation","transpose","transpose","transpose","transpose","trunc","trunc","trunc","trunc","truncate","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","try_normalize","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec2","vec3","vec3a","vec4","w","w","w_axis","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","x","x","x_axis","x_axis","x_axis","x_axis","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxy","xxxz","xxxz","xxxz","xxy","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyy","xxyz","xxyz","xxyz","xxz","xxz","xxz","xxzw","xxzx","xxzx","xxzx","xxzy","xxzy","xxzy","xxzz","xxzz","xxzz","xy","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxy","xyxz","xyxz","xyxz","xyy","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyy","xyyz","xyyz","xyyz","xyz","xyz","xyz","xyz","xyzw","xyzx","xyzx","xyzx","xyzy","xyzy","xyzy","xyzz","xyzz","xyzz","xz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzx","xzxw","xzxx","xzxx","xzxx","xzxy","xzxy","xzxy","xzxz","xzxz","xzxz","xzy","xzy","xzy","xzyw","xzyx","xzyx","xzyx","xzyy","xzyy","xzyy","xzyz","xzyz","xzyz","xzz","xzz","xzz","xzzw","xzzx","xzzx","xzzx","xzzy","xzzy","xzzy","xzzz","xzzz","xzzz","y","y","y","y","y","y_axis","y_axis","y_axis","y_axis","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxy","yxxz","yxxz","yxxz","yxy","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyy","yxyz","yxyz","yxyz","yxz","yxz","yxz","yxzw","yxzx","yxzx","yxzx","yxzy","yxzy","yxzy","yxzz","yxzz","yxzz","yy","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxy","yyxz","yyxz","yyxz","yyy","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyy","yyyz","yyyz","yyyz","yyz","yyz","yyz","yyzw","yyzx","yyzx","yyzx","yyzy","yyzy","yyzy","yyzz","yyzz","yyzz","yz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzx","yzxw","yzxx","yzxx","yzxx","yzxy","yzxy","yzxy","yzxz","yzxz","yzxz","yzy","yzy","yzy","yzyw","yzyx","yzyx","yzyx","yzyy","yzyy","yzyy","yzyz","yzyz","yzyz","yzz","yzz","yzz","yzzw","yzzx","yzzx","yzzx","yzzy","yzzy","yzzy","yzzz","yzzz","yzzz","z","z","z","z","z_axis","z_axis","z_axis","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxx","zxxw","zxxx","zxxx","zxxx","zxxy","zxxy","zxxy","zxxz","zxxz","zxxz","zxy","zxy","zxy","zxyw","zxyx","zxyx","zxyx","zxyy","zxyy","zxyy","zxyz","zxyz","zxyz","zxz","zxz","zxz","zxzw","zxzx","zxzx","zxzx","zxzy","zxzy","zxzy","zxzz","zxzz","zxzz","zy","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyx","zyxw","zyxx","zyxx","zyxx","zyxy","zyxy","zyxy","zyxz","zyxz","zyxz","zyy","zyy","zyy","zyyw","zyyx","zyyx","zyyx","zyyy","zyyy","zyyy","zyyz","zyyz","zyyz","zyz","zyz","zyz","zyzw","zyzx","zyzx","zyzx","zyzy","zyzy","zyzy","zyzz","zyzz","zyzz","zz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzx","zzxw","zzxx","zzxx","zzxx","zzxy","zzxy","zzxy","zzxz","zzxz","zzxz","zzy","zzy","zzy","zzyw","zzyx","zzyx","zzyx","zzyy","zzyy","zzyy","zzyz","zzyz","zzyz","zzz","zzz","zzz","zzzw","zzzx","zzzx","zzzx","zzzy","zzzy","zzzy","zzzz","zzzz","zzzz","AXES","AXES","AXES","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","INFINITY","INFINITY","INFINITY","MAX","MAX","MAX","MIN","MIN","MIN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NEG_INFINITY","NEG_INFINITY","NEG_INFINITY","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","ONE","ONE","ONE","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat3","add_mat4","angle_between","angle_between","angle_between","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_vector","as_f32","as_i16vec2","as_i16vec3","as_i16vec4","as_i64vec2","as_i64vec3","as_i64vec4","as_ivec2","as_ivec3","as_ivec4","as_mat2","as_mat3","as_mat4","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_quat","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_u16vec2","as_u16vec3","as_u16vec4","as_u64vec2","as_u64vec3","as_u64vec4","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","ceil","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","col","col","col","col_mut","col_mut","col_mut","conjugate","copysign","copysign","copysign","cross","default","default","default","default","default","default","default","default","default","deref","deref","deref_mut","deref_mut","determinant","determinant","determinant","distance","distance","distance","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","dmat2","dmat3","dmat4","dot","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","dquat","dvec2","dvec3","dvec4","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","extend","extend","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_angle","from_angle","from_angle","from_angle","from_angle_translation","from_array","from_array","from_array","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat4","from_mat4","from_mat4","from_quat","from_quat","from_quat","from_rotation_arc","from_rotation_arc_2d","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_slice","from_slice","from_slice","from_slice","from_translation","from_translation","from_translation","from_translation","from_vec4","from_xyzw","index","index","index","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_normalized","is_normalized","is_normalized","is_normalized","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_to_lh","look_to_lh","look_to_rh","look_to_rh","matrix2","matrix3","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat3","mul_mat4","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec3","mul_vec3","mul_vec4","neg","neg","neg","neg","neg","neg","neg","new","new","new","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","orthographic_lh","orthographic_rh","orthographic_rh_gl","perp","perp_dot","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_lh","perspective_rh","perspective_rh_gl","powf","powf","powf","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","recip","recip","recip","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rotate","round","round","round","row","row","row","select","select","select","signum","signum","signum","slerp","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat3","sub_mat4","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","to_angle","to_array","to_array","to_array","to_array","to_axis_angle","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_angle_translation","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point3","transform_point3","transform_vector2","transform_vector2","transform_vector3","transform_vector3","translation","translation","transpose","transpose","transpose","trunc","trunc","trunc","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","w","w","w_axis","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","x","x_axis","x_axis","x_axis","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","y","y_axis","y_axis","y_axis","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","z","z_axis","z_axis","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","I16Vec2","I16Vec3","I16Vec4","MAX","MAX","MAX","MIN","MIN","MIN","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","ONE","ONE","ONE","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","abs","abs","abs","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_i64vec2","as_i64vec3","as_i64vec4","as_ivec2","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_u16vec2","as_u16vec3","as_u16vec4","as_u64vec2","as_u64vec3","as_u64vec4","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","i16vec2","i16vec3","i16vec4","index","index","index","index_mut","index_mut","index_mut","into","into","into","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","length_squared","length_squared","length_squared","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new","new","not","not","not","perp","perp_dot","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rotate","saturating_add","saturating_add","saturating_add","saturating_div","saturating_div","saturating_div","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","select","select","select","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","signum","signum","signum","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","w","wrapping_add","wrapping_add","wrapping_add","wrapping_div","wrapping_div","wrapping_div","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_sub","wrapping_sub","wrapping_sub","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","IVec2","IVec3","IVec4","MAX","MAX","MAX","MIN","MIN","MIN","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","ONE","ONE","ONE","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","abs","abs","abs","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_i16vec2","as_i16vec3","as_i16vec4","as_i64vec2","as_i64vec3","as_i64vec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_u16vec2","as_u16vec3","as_u16vec4","as_u64vec2","as_u64vec3","as_u64vec4","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","into","into","into","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","ivec2","ivec3","ivec4","length_squared","length_squared","length_squared","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new","new","not","not","not","perp","perp_dot","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rotate","saturating_add","saturating_add","saturating_add","saturating_div","saturating_div","saturating_div","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","select","select","select","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","signum","signum","signum","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","w","wrapping_add","wrapping_add","wrapping_add","wrapping_div","wrapping_div","wrapping_div","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_sub","wrapping_sub","wrapping_sub","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","I64Vec2","I64Vec3","I64Vec4","MAX","MAX","MAX","MIN","MIN","MIN","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","ONE","ONE","ONE","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","abs","abs","abs","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_i16vec2","as_i16vec3","as_i16vec4","as_ivec2","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_u16vec2","as_u16vec3","as_u16vec4","as_u64vec2","as_u64vec3","as_u64vec4","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","i64vec2","i64vec3","i64vec4","index","index","index","index_mut","index_mut","index_mut","into","into","into","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","length_squared","length_squared","length_squared","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new","new","not","not","not","perp","perp_dot","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rotate","saturating_add","saturating_add","saturating_add","saturating_div","saturating_div","saturating_div","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","select","select","select","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","signum","signum","signum","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","w","wrapping_add","wrapping_add","wrapping_add","wrapping_div","wrapping_div","wrapping_div","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_sub","wrapping_sub","wrapping_sub","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3Swizzles","Vec4","Vec4","Vec4Swizzles","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyz","xyzw","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","MAX","MAX","MAX","MIN","MIN","MIN","ONE","ONE","ONE","U16Vec2","U16Vec3","U16Vec4","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_i16vec2","as_i16vec3","as_i16vec4","as_i64vec2","as_i64vec3","as_i64vec4","as_ivec2","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_u64vec2","as_u64vec3","as_u64vec4","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","into","into","into","length_squared","length_squared","length_squared","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","new","new","new","not","not","not","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","saturating_add","saturating_add","saturating_add","saturating_div","saturating_div","saturating_div","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","select","select","select","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u16vec2","u16vec3","u16vec4","w","wrapping_add","wrapping_add","wrapping_add","wrapping_div","wrapping_div","wrapping_div","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_sub","wrapping_sub","wrapping_sub","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","MAX","MAX","MAX","MIN","MIN","MIN","ONE","ONE","ONE","UVec2","UVec3","UVec4","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_i16vec2","as_i16vec3","as_i16vec4","as_i64vec2","as_i64vec3","as_i64vec4","as_ivec2","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_u16vec2","as_u16vec3","as_u16vec4","as_u64vec2","as_u64vec3","as_u64vec4","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","into","into","into","length_squared","length_squared","length_squared","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","new","new","new","not","not","not","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","saturating_add","saturating_add","saturating_add","saturating_div","saturating_div","saturating_div","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","select","select","select","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uvec2","uvec3","uvec4","w","wrapping_add","wrapping_add","wrapping_add","wrapping_div","wrapping_div","wrapping_div","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_sub","wrapping_sub","wrapping_sub","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","MAX","MAX","MAX","MIN","MIN","MIN","ONE","ONE","ONE","U64Vec2","U64Vec3","U64Vec4","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_i16vec2","as_i16vec3","as_i16vec4","as_i64vec2","as_i64vec3","as_i64vec4","as_ivec2","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_u16vec2","as_u16vec3","as_u16vec4","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","into","into","into","length_squared","length_squared","length_squared","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","new","new","new","not","not","not","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","saturating_add","saturating_add","saturating_add","saturating_div","saturating_div","saturating_div","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","select","select","select","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u64vec2","u64vec3","u64vec4","w","wrapping_add","wrapping_add","wrapping_add","wrapping_div","wrapping_div","wrapping_div","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_sub","wrapping_sub","wrapping_sub","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz"],"q":[[0,"glam"],[38,"glam::bool"],[219,"glam::f32"],[1879,"glam::f64"],[3197,"glam::i16"],[4106,"glam::i32"],[5015,"glam::i64"],[5924,"glam::swizzles"],[6417,"glam::u16"],[7290,"glam::u32"],[8163,"glam::u64"],[9036,"core::fmt"],[9037,"core::fmt"],[9038,"core::result"],[9039,"core::any"],[9040,"alloc::string"],[9041,"core::iter::traits::iterator"],[9042,"core::option"]],"d":["Rotation Helper  Euler rotation sequences.","A trait for extending <code>f32</code> and <code>f64</code> with extra methods.","","","","Intrinsic three-axis rotation XYZ","Intrinsic three-axis rotation XZY","Intrinsic three-axis rotation YXZ","Intrinsic three-axis rotation YZX","Intrinsic three-axis rotation ZXY","Intrinsic three-axis rotation ZYX","<code>bool</code> vector mask types. ","","","","","Default <code>YXZ</code> as yaw (y-axis), pitch (x-axis), roll (z-axis).","","<code>f32</code> vector, quaternion and matrix types. ","<code>f64</code> vector, quaternion and matrix types. ","","Returns the argument unchanged.","","<code>i16</code> vector types. ","<code>i32</code> vector types. ","<code>i64</code> vector types. ","Calls <code>U::from(self)</code>.","Returns <code>v</code> normalized to the range <code>[a, b]</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Remap <code>self</code> from the input range to the output range.","Traits adding swizzle methods to all vector types. ","","","","","<code>u16</code> vector types. ","<code>u32</code> vector types. ","<code>u64</code> vector types. ","A 2-dimensional <code>bool</code> vector mask.","A 3-dimensional <code>bool</code> vector mask.","A 3-dimensional <code>u32</code> vector mask.","A 4-dimensional <code>bool</code> vector mask.","A 4-dimensional <code>u32</code> vector mask.","All false.","All false.","All false.","All false.","All false.","All true.","All true.","All true.","All true.","All true.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","","","","","","","","","","","Returns a bitmask with the lowest 2 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","","","","","","Sets the element at <code>index</code>.","Sets the element at <code>index</code>.","Sets the element at <code>index</code>.","Sets the element at <code>index</code>.","Sets the element at <code>index</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Tests the value at <code>index</code>.","Tests the value at <code>index</code>.","Tests the value at <code>index</code>.","Tests the value at <code>index</code>.","Tests the value at <code>index</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The unit axes.","The unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","The identity transform.","The identity transform.","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","All <code>f32::INFINITY</code>.","All <code>f32::INFINITY</code>.","All <code>f32::INFINITY</code>.","All <code>f32::INFINITY</code>.","All <code>f32::MAX</code>.","All <code>f32::MAX</code>.","All <code>f32::MAX</code>.","All <code>f32::MAX</code>.","All <code>f32::MIN</code>.","All <code>f32::MIN</code>.","All <code>f32::MIN</code>.","All <code>f32::MIN</code>.","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","All NAN:s.","All NAN:s.","All NAN:s.","All <code>f32::NAN</code>.","All <code>f32::NAN</code>.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All <code>f32::NAN</code>.","All <code>f32::NAN</code>.","All <code>f32::NEG_INFINITY</code>.","All <code>f32::NEG_INFINITY</code>.","All <code>f32::NEG_INFINITY</code>.","All <code>f32::NEG_INFINITY</code>.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","A unit vector pointing along the negative W axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Z axis.","A unit vector pointing along the negative Z axis.","A unit vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","All ones.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","The degenerate zero transform.","The degenerate zero transform.","A 3x3 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","","","","","","Adds two quaternions.","","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Returns the angle (in radians) between <code>self</code> and <code>rhs</code> in the …","Returns the angle (in radians) between two vectors.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between two vectors.","Returns some vector that is orthogonal to the given one.","Returns some vector that is orthogonal to the given one.","Given a unit vector return two other vectors that together …","Given a unit vector return two other vectors that together …","Returns any unit vector that is orthogonal to the given …","Returns any unit vector that is orthogonal to the given …","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Creates a <code>Vec3A</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code> …","","","Returns the argument unchanged.","","","","","","","","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 2D rotation …","Creates a new vector from an array.","Creates a new vector from an array.","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 4x4 matrix from four column vectors.","Creates an affine transform from a <code>[f32; 6]</code> array stored …","Creates an affine transform from a <code>[f32; 12]</code> array stored …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 2x2 matrix from a <code>[f32; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f32; 16]</code> array stored in …","Creates an affine transform from a <code>[[f32; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f32; 3]; 4]</code> 3D array …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 2x2 matrix from a <code>[[f32; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f32; 4]; 4]</code> 4D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3D rotation matrix from the given euler rotation …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>Mat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>Mat3A</code> must be an affine transform,","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 SIMD aligned rotation …","The given <code>Mat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians around …","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a rotation quaternion from a slice.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 4x4 matrix from four column vectors.","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies a quaternion by a scalar value.","","Multiplies a quaternion and a 3D vector, returning the …","Multiplies two quaternions. If they each represent a …","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","","","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies a 3x3 matrix by a scalar.","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Transforms a 2D vector.","Transforms a 3D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a <code>Vec3A</code>.","Transforms a <code>Vec3A</code>.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with […","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","","","","","","","","","","","","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Transforms the given 3D vector as a point, applying …","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","","","","","","","","","","","","","","","","","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Performs a spherical linear interpolation between <code>self</code> and …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","","","","","","","","","","","","","","","","","","","Returns the angle (in radians) of this vector in the range …","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis (normalized) and angle (in …","Creates a <code>[f32; 6]</code> array storing data in column major …","Creates a <code>[f32; 12]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 4]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 16]</code> array storing data in column major …","Creates a <code>[[f32; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 4]; 4]</code> 4D array storing data in column …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","","","Extracts <code>scale</code>, <code>angle</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","","","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given <code>Vec3A</code>, applying shear, scale, …","Transforms the given <code>Vec3A</code> as 3D point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","Transforms the given <code>Vec3A</code>, applying shear, scale and …","Transforms the give <code>Vec3A</code> as 3D vector.","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns a vector containing the integer part each element …","Returns a vector containing the integer part each element …","Returns a vector containing the integer part each element …","Returns a vector containing the integer part each element …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …eturns the vector part of the quaternionhe unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","The identity transform.","The identity transform.","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","All <code>f64::INFINITY</code>.","All <code>f64::INFINITY</code>.","All <code>f64::INFINITY</code>.","All <code>f64::MAX</code>.","All <code>f64::MAX</code>.","All <code>f64::MAX</code>.","All <code>f64::MIN</code>.","All <code>f64::MIN</code>.","All <code>f64::MIN</code>.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All <code>f64::NAN</code>.","All <code>f64::NAN</code>.","All <code>f64::NAN</code>.","All <code>f64::NEG_INFINITY</code>.","All <code>f64::NEG_INFINITY</code>.","All <code>f64::NEG_INFINITY</code>.","All negative ones.","All negative ones.","All negative ones.","A unit vector pointing along the negative W axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Z axis.","A unit vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","The degenerate zero transform.","The degenerate zero transform.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","Adds two quaternions.","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between <code>self</code> and <code>rhs</code> in the …","Returns the angle (in radians) between two vectors.","Returns some vector that is orthogonal to the given one.","Given a unit vector return two other vectors that together …","Returns any unit vector that is orthogonal to the given …","","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 4x4 matrix from four column vectors.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates an affine transform from the given 2D rotation …","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from three column vectors.","Creates a 4x4 matrix from four column vectors.","Creates an affine transform from a <code>[f64; 6]</code> array stored …","Creates an affine transform from a <code>[f64; 12]</code> array stored …","Creates a 2x2 matrix from a <code>[f64; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f64; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f64; 16]</code> array stored in …","Creates an affine transform from a <code>[[f64; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f64; 3]; 4]</code> 3D array …","Creates a 2x2 matrix from a <code>[[f64; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f64; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f64; 4]; 4]</code> 4D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>DMat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>DMat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians around …","Creates a rotation quaternion from a slice.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","Multiplies a quaternion by a scalar value.","Multiplies a quaternion and a 3D vector, returning the …","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Transforms a 2D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with […","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","","","","","","","","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Transforms the given 3D vector as a point, applying …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","","","","","","","","","","","","","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Performs a spherical linear interpolation between <code>self</code> and …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","","","","","","","","","","","","","","","Returns the angle (in radians) of this vector in the range …","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis (normalized) and angle (in …","Creates a <code>[f64; 6]</code> array storing data in column major …","Creates a <code>[f64; 12]</code> array storing data in column major …","Creates a <code>[f64; 4]</code> array storing data in column major …","Creates a <code>[f64; 9]</code> array storing data in column major …","Creates a <code>[f64; 16]</code> array storing data in column major …","Creates a <code>[[f64; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f64; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f64; 4]; 4]</code> 4D array storing data in column …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","Extracts <code>scale</code>, <code>angle</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns a vector containing the integer part each element …","Returns a vector containing the integer part each element …","Returns a vector containing the integer part each element …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","","","","","","","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …eturns the vector part of the quaternionhe unit axes.","The unit axes.","The unit axes.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","All <code>i16::MAX</code>.","All <code>i16::MAX</code>.","All <code>i16::MAX</code>.","All <code>i16::MIN</code>.","All <code>i16::MIN</code>.","All <code>i16::MIN</code>.","All negative ones.","All negative ones.","All negative ones.","A unit vector pointing along the negative W axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Z axis.","A unit vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>i16::clamp</code>.","Component-wise clamping of values, similar to <code>i16::clamp</code>.","Component-wise clamping of values, similar to <code>i16::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","","","","","","","","","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","","","","","","","","","","","","","","","","","","","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …he unit axes.","The unit axes.","The unit axes.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","All <code>i32::MAX</code>.","All <code>i32::MAX</code>.","All <code>i32::MAX</code>.","All <code>i32::MIN</code>.","All <code>i32::MIN</code>.","All <code>i32::MIN</code>.","All negative ones.","All negative ones.","All negative ones.","A unit vector pointing along the negative W axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Z axis.","A unit vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","","","","","","","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","","","","","","","","","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","","","","","","","","","","","","","","","","","","","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …he unit axes.","The unit axes.","The unit axes.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","All <code>i64::MAX</code>.","All <code>i64::MAX</code>.","All <code>i64::MAX</code>.","All <code>i64::MIN</code>.","All <code>i64::MIN</code>.","All <code>i64::MIN</code>.","All negative ones.","All negative ones.","All negative ones.","A unit vector pointing along the negative W axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative X axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Y axis.","A unit vector pointing along the negative Z axis.","A unit vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>i64::clamp</code>.","Component-wise clamping of values, similar to <code>i64::clamp</code>.","Component-wise clamping of values, similar to <code>i64::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","","","","","","","","","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Returns the element-wise quotient of [Euclidean division] …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","","","","","","","","","","","","","","","","","","","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns the element-wise remainder of Euclidean division …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …he unit axes.","The unit axes.","The unit axes.","All <code>u16::MAX</code>.","All <code>u16::MAX</code>.","All <code>u16::MAX</code>.","All <code>u16::MIN</code>.","All <code>u16::MIN</code>.","All <code>u16::MIN</code>.","All ones.","All ones.","All ones.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>u16::clamp</code>.","Component-wise clamping of values, similar to <code>u16::clamp</code>.","Component-wise clamping of values, similar to <code>u16::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …he unit axes.","The unit axes.","The unit axes.","All <code>u32::MAX</code>.","All <code>u32::MAX</code>.","All <code>u32::MAX</code>.","All <code>u32::MIN</code>.","All <code>u32::MIN</code>.","All <code>u32::MIN</code>.","All ones.","All ones.","All ones.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>u64</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …he unit axes.","The unit axes.","The unit axes.","All <code>u64::MAX</code>.","All <code>u64::MAX</code>.","All <code>u64::MAX</code>.","All <code>u64::MIN</code>.","All <code>u64::MIN</code>.","All <code>u64::MIN</code>.","All ones.","All ones.","All ones.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A unit vector pointing along the positive W axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive X axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Y axis.","A unit vector pointing along the positive Z axis.","A unit vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i16</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u16</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>u64::clamp</code>.","Component-wise clamping of values, similar to <code>u64::clamp</code>.","Component-wise clamping of values, similar to <code>u64::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating addition of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating division of <code>self</code>…","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating multiplication …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Returns a vector containing the saturating subtraction of …","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping addition of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping division of <code>self</code> …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping multiplication of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Returns a vector containing the wrapping subtraction of …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …if":[0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[],1],[[1,1],3],0,0,[[1,4],5],[-1,-1,[]],[[1,-1],2,6],0,0,0,[-1,-2,[],[]],[[7,7,7],7],[[7,7,7],7],[[7,7,7,7,7],7],0,[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[10,3],[11,3],[12,3],[13,3],[14,3],[10,3],[11,3],[12,3],[13,3],[14,3],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[10,10],2],[[11,11],2],[[12,12],2],[[13,13],2],[[14,14],2],[10,15],[11,15],[12,15],[13,15],[14,15],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[10,10],2],[[11,11],2],[[12,12],2],[[13,13],2],[[14,14],2],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[10,10],2],[[11,11],2],[[12,12],2],[[13,13],2],[[14,14],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,10],[11,11],[12,12],[13,13],[14,14],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],10],[[],11],[[],12],[[],13],[[],14],[[10,10],3],[[11,11],3],[[12,12],3],[[13,13],3],[[14,14],3],[[10,4],5],[[10,4],5],[[11,4],5],[[11,4],5],[[12,4],5],[[12,4],5],[[13,4],5],[[13,4],5],[[14,4],5],[[14,4],5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[10,-1],2,6],[[11,-1],2,6],[[12,-1],2,6],[[13,-1],2,6],[[14,-1],2,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,3],10],[[3,3,3],11],[[3,3,3,3],12],[[3,3,3],13],[[3,3,3,3],14],[10,10],[11,11],[12,12],[13,13],[14,14],[[10,16,3],2],[[11,16,3],2],[[12,16,3],2],[[13,16,3],2],[[14,16,3],2],[3,10],[3,11],[3,12],[3,13],[3,14],[[10,16],3],[[11,16],3],[[12,16],3],[[13,16],3],[[14,16],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[18,18],[19,19],[20,20],[21,21],[[22,22,23],3],[[24,24,23],3],[[25,25,23],3],[[18,18,23],3],[[19,19,23],3],[[26,26,23],3],[[27,27,23],3],[[28,28,23],3],[[29,29,23],3],[[20,20,23],3],[[21,21,23],3],[[25,25],-1,[]],[[18,23],18],[[18,18],18],[[19,23],19],[[19,19],19],[[26,26],-1,[]],[[27,27],-1,[]],[[28,28],-1,[]],[[29,29],29],[[20,20],20],[[20,23],20],[[21,21],21],[[21,23],21],[[25,25],2],[[18,18],2],[[18,23],2],[[19,23],2],[[19,19],2],[[26,26],2],[[27,27],2],[[28,28],2],[[20,20],2],[[20,23],2],[[21,21],2],[[21,23],2],[[26,26],26],[[25,25],25],[[27,27],27],[[28,28],28],[[18,18],23],[[19,19],23],[[29,29],23],[[20,20],23],[19,19],[20,20],[19,[[2,[19,19]]]],[20,[[2,[20,20]]]],[19,19],[20,20],[26,30],[25,31],[27,31],[28,32],[29,33],[18,34],[19,35],[20,35],[21,36],[29,33],[18,37],[19,38],[20,38],[21,39],[18,40],[19,41],[20,41],[21,42],[18,43],[19,44],[20,44],[21,45],[25,[[46,[23]]]],[18,[[46,[23]]]],[19,[[46,[23]]]],[26,[[46,[23]]]],[28,[[46,[23]]]],[20,[[46,[23]]]],[21,[[46,[23]]]],[25,[[46,[23]]]],[18,[[46,[23]]]],[19,[[46,[23]]]],[26,[[46,[23]]]],[28,[[46,[23]]]],[29,[[46,[23]]]],[20,[[46,[23]]]],[21,[[46,[23]]]],[18,47],[19,48],[20,48],[21,49],[18,50],[19,51],[20,51],[21,52],[18,53],[19,54],[20,54],[21,55],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[18,18],[19,19],[20,20],[21,21],[[18,18,18],18],[[19,19,19],19],[[20,20,20],20],[[21,21,21],21],[[18,23,23],18],[[19,23,23],19],[[20,23,23],20],[[21,23,23],21],[[18,23],18],[[19,23],19],[[20,23],20],[[21,23],21],[[18,23],18],[[19,23],19],[[20,23],20],[[21,23],21],[22,22],[24,24],[25,25],[18,18],[19,19],[26,26],[27,27],[28,28],[29,29],[20,20],[21,21],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[18,18],10],[[19,19],11],[[20,20],13],[[21,21],14],[[18,18],10],[[19,19],11],[[20,20],13],[[21,21],14],[[18,18],10],[[19,19],11],[[20,20],13],[[21,21],14],[[18,18],10],[[19,19],11],[[20,20],13],[[21,21],14],[[18,18],10],[[19,19],11],[[20,20],13],[[21,21],14],[[18,18],10],[[19,19],11],[[20,20],13],[[21,21],14],[[25,16],19],[[26,16],18],[[27,16],20],[[28,16],21],[[25,16],19],[[26,16],18],[[27,16],20],[[28,16],21],[29,29],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],21],[[19,19],19],[[20,20],20],[[],22],[[],24],[[],25],[[],18],[[],19],[[],26],[[],27],[[],28],[[],29],[[],20],[[],21],[22,-1,[]],[24,-1,[]],[22,-1,[]],[24,-1,[]],[25,23],[26,23],[27,23],[28,23],[[18,18],23],[[19,19],23],[[20,20],23],[[21,21],23],[[18,18],23],[[19,19],23],[[20,20],23],[[21,21],23],[[18,18],18],[[18,23],18],[[19,23],19],[[19,19],19],[[29,23],29],[[20,20],20],[[20,23],20],[[21,21],21],[[21,23],21],[[18,23],2],[[18,18],2],[[19,23],2],[[19,19],2],[[20,20],2],[[20,23],2],[[21,23],2],[[21,21],2],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],21],[[18,18],23],[[19,19],23],[[29,29],23],[[20,20],23],[[21,21],23],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],21],[[22,22],3],[[24,24],3],[[25,25],3],[[18,18],3],[[19,19],3],[[26,26],3],[[27,27],3],[[28,28],3],[[29,29],3],[[20,20],3],[[21,21],3],[18,18],[19,19],[20,20],[21,21],[[18,23],19],[[19,23],21],[[20,23],21],[18,18],[19,19],[20,20],[21,21],[[22,4],5],[[22,4],5],[[24,4],5],[[24,4],5],[[25,4],5],[[25,4],5],[[18,4],5],[[18,4],5],[[19,4],5],[[19,4],5],[[26,4],5],[[26,4],5],[[27,4],5],[[27,4],5],[[28,4],5],[[28,4],5],[[29,4],5],[[29,4],5],[[20,4],5],[[20,4],5],[[21,4],5],[[21,4],5],[18,18],[19,19],[20,20],[21,21],[-1,-1,[]],[-1,-1,[]],[22,25],[27,25],[-1,-1,[]],[-1,-1,[]],[[[46,[23]]],18],[[[2,[23,23]]],18],[[[2,[23,23,23]]],19],[[[46,[23]]],19],[20,19],[[[2,[18,23]]],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[25,27],[22,27],[-1,-1,[]],[24,28],[-1,-1,[]],[19,20],[[[46,[23]]],20],[-1,-1,[]],[21,20],[[[2,[18,23]]],20],[[[2,[23,23,23]]],20],[-1,-1,[]],[[[2,[23,20]]],21],[[[2,[18,23,23]]],21],[[[2,[23,19]]],21],[[[46,[23]]],21],[[[2,[23,23,23,23]]],21],[[[2,[19,23]]],21],[[[2,[20,23]]],21],[[[2,[18,18]]],21],[29,21],[24,29],[23,22],[23,25],[23,18],[23,26],[23,27],[[23,18],22],[[[46,[23]]],18],[[[46,[23]]],19],[[[46,[23]]],29],[[[46,[23]]],20],[[[46,[23]]],21],[[19,23],24],[[19,23],25],[[19,23],27],[[19,23],28],[[19,23],29],[[18,18,18],22],[[20,20,20,20],24],[[19,19,19],25],[[18,18],26],[[20,20,20],27],[[21,21,21,21],28],[[[46,[23]]],22],[[[46,[23]]],24],[[[46,[23]]],25],[[[46,[23]]],26],[[[46,[23]]],27],[[[46,[23]]],28],[[[46,[[46,[23]]]]],22],[[[46,[[46,[23]]]]],24],[[[46,[[46,[23]]]]],25],[[[46,[[46,[23]]]]],26],[[[46,[[46,[23]]]]],27],[[[46,[[46,[23]]]]],28],[[[56,[23]]],22],[[[56,[23]]],24],[[[56,[23]]],25],[[[56,[23]]],26],[[[56,[23]]],27],[[[56,[23]]],28],[19,25],[18,26],[19,27],[21,28],[[1,23,23,23],25],[[1,23,23,23],27],[[1,23,23,23],28],[[1,23,23,23],29],[26,22],[26,25],[26,27],[[26,18],22],[25,22],[25,24],[25,26],[25,28],[25,29],[[25,19],24],[27,22],[27,26],[27,28],[27,29],[28,24],[28,25],[28,27],[28,29],[29,24],[29,25],[29,27],[29,28],[[19,19],29],[[18,18],29],[[19,19],29],[[29,19],24],[[29,19],28],[23,24],[23,25],[23,27],[23,28],[23,29],[23,24],[23,25],[23,27],[23,28],[23,29],[23,24],[23,25],[23,27],[23,28],[23,29],[18,22],[19,24],[18,25],[18,27],[19,28],[[18,23],26],[[18,23,18],22],[[18,23,18],25],[[18,23,18],27],[[19,29,19],24],[[19,29,19],28],[19,29],[[[56,[23]]],18],[[[56,[23]]],19],[[[56,[23]]],29],[[[56,[23]]],20],[[[56,[23]]],21],[18,22],[19,24],[18,25],[18,27],[19,28],[21,29],[[23,23,23,23],29],[[18,16],-1,[]],[[19,16],-1,[]],[[20,16],-1,[]],[[21,16],-1,[]],[[18,16],-1,[]],[[19,16],-1,[]],[[20,16],-1,[]],[[21,16],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[22,22],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[22,3],[24,3],[25,3],[18,3],[19,3],[26,3],[27,3],[28,3],[29,3],[20,3],[21,3],[22,3],[24,3],[25,3],[18,3],[19,3],[26,3],[27,3],[28,3],[29,3],[20,3],[21,3],[18,10],[19,11],[20,13],[21,14],[29,3],[18,15],[19,15],[20,15],[21,15],[18,3],[19,3],[29,3],[20,3],[21,3],[18,23],[19,23],[29,23],[20,23],[21,23],[18,23],[19,23],[29,23],[20,23],[21,23],[18,23],[19,23],[29,23],[20,23],[21,23],[[18,18,23],18],[[19,19,23],19],[[29,29,23],29],[[20,20,23],20],[[21,21,23],21],[[19,19,19],24],[[19,19,19],28],[[19,19,19],24],[[19,19,19],28],[[19,19,19],24],[[19,19,19],28],[[19,19,19],24],[[19,19,19],28],[[18,18],26],[[19,19,19],25],[[20,20,20],27],[[21,21,21,21],28],0,0,[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],21],[18,23],[19,23],[20,23],[21,23],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],21],[18,23],[19,23],[20,23],[21,23],[[22,22],-1,[]],[[22,27],-1,[]],[[22,25],-1,[]],[[24,24],-1,[]],[[24,28],-1,[]],[[25,20],20],[[25,25],-1,[]],[[25,19],-1,[]],[[25,22],-1,[]],[[25,23],-1,[]],[[18,23],18],[[18,18],18],[[19,23],19],[[19,19],19],[[26,26],-1,[]],[[26,18],-1,[]],[[26,23],-1,[]],[[27,27],-1,[]],[[27,22],-1,[]],[[27,19],19],[[27,20],-1,[]],[[27,23],-1,[]],[[28,28],-1,[]],[[28,24],-1,[]],[[28,21],-1,[]],[[28,23],-1,[]],[[29,23],29],[[29,20],-1,[]],[[29,19],-1,[]],[[29,29],29],[[20,20],20],[[20,23],20],[[21,21],21],[[21,23],21],[[18,18,18],18],[[19,19,19],19],[[20,20,20],20],[[21,21,21],21],[[22,22],2],[[24,24],2],[[25,25],2],[[25,23],2],[[18,18],2],[[18,23],2],[[19,19],2],[[19,23],2],[[26,23],2],[[26,26],2],[[27,27],2],[[27,23],2],[[28,23],2],[[28,28],2],[[29,29],2],[[20,23],2],[[20,20],2],[[21,23],2],[[21,21],2],[[26,26],26],[[25,25],25],[[27,27],27],[[28,28],28],[[29,29],29],[[25,23],25],[[26,23],26],[[27,23],27],[[28,23],28],[[26,18],18],[[25,19],19],[[27,19],19],[[29,19],19],[[25,20],20],[[27,20],20],[[29,20],20],[[28,21],21],[25,-1,[]],[18,18],[19,19],[26,-1,[]],[27,-1,[]],[28,-1,[]],[29,29],[20,20],[21,21],[[23,23],18],[[23,23,23],19],[[23,23,23],20],[[23,23,23,23],21],[18,18],[19,19],[29,29],[20,20],[21,21],[18,18],[19,19],[20,20],[21,21],[[23,23,23,23,23,23],28],[[23,23,23,23,23,23],28],[[23,23,23,23,23,23],28],[18,18],[[18,18],23],[[23,23,23],28],[[23,23,23],28],[[23,23,23],28],[[23,23,23],28],[[23,23,23,23],28],[[23,23,23,23],28],[[23,23,23,23],28],[[18,23],18],[[19,23],19],[[20,23],20],[[21,23],21],[-1,22,[[58,[],[[57,[22]]]]]],[-1,24,[[58,[],[[57,[24]]]]]],[-1,25,[[58,[],[[57,[25]]]]]],[-1,25,[[58,[],[[57,[25]]]]]],[-1,18,[[58,[],[[57,[18]]]]]],[-1,18,[[58,[],[[57,[18]]]]]],[-1,19,[[58,[],[[57,[19]]]]]],[-1,19,[[58,[],[[57,[19]]]]]],[-1,26,[[58,[],[[57,[26]]]]]],[-1,26,[[58,[],[[57,[26]]]]]],[-1,27,[[58,[],[[57,[27]]]]]],[-1,27,[[58,[],[[57,[27]]]]]],[-1,28,[[58,[],[[57,[28]]]]]],[-1,28,[[58,[],[[57,[28]]]]]],[-1,29,[[58,[],[[57,[29]]]]]],[-1,29,[[58,[],[[57,[29]]]]]],[-1,20,[[58,[],[[57,[20]]]]]],[-1,20,[[58,[],[[57,[20]]]]]],[-1,21,[[58,[],[[57,[21]]]]]],[-1,21,[[58,[],[[57,[21]]]]]],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],21],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],21],[[28,19],19],[[23,23,23,23],29],[18,18],[19,19],[20,20],[21,21],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],21],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],21],[[18,23],18],[[18,18],18],[[19,23],19],[[19,19],19],[[20,20],20],[[20,23],20],[[21,23],21],[[21,21],21],[[18,23],2],[[18,18],2],[[19,23],2],[[19,19],2],[[20,20],2],[[20,23],2],[[21,21],2],[[21,23],2],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],21],[[18,18],18],[18,18],[19,19],[20,20],[21,21],[[25,16],19],[[26,16],18],[[27,16],20],[[28,16],21],[[10,18,18],18],[[11,19,19],19],[[13,20,20],20],[[14,21,21],21],[18,18],[19,19],[20,20],[21,21],[[29,29,23],29],[23,18],[23,19],[23,20],[23,21],[[25,25],-1,[]],[[18,23],18],[[18,18],18],[[19,19],19],[[19,23],19],[[26,26],-1,[]],[[27,27],-1,[]],[[28,28],-1,[]],[[29,29],29],[[20,20],20],[[20,23],20],[[21,23],21],[[21,21],21],[[25,25],2],[[18,23],2],[[18,18],2],[[19,19],2],[[19,23],2],[[26,26],2],[[27,27],2],[[28,28],2],[[20,20],2],[[20,23],2],[[21,21],2],[[21,23],2],[[26,26],26],[[25,25],25],[[27,27],27],[[28,28],28],[-1,25,[[58,[],[[57,[25]]]]]],[-1,25,[[58,[],[[57,[25]]]]]],[-1,18,[[58,[],[[57,[18]]]]]],[-1,18,[[58,[],[[57,[18]]]]]],[-1,19,[[58,[],[[57,[19]]]]]],[-1,19,[[58,[],[[57,[19]]]]]],[-1,26,[[58,[],[[57,[26]]]]]],[-1,26,[[58,[],[[57,[26]]]]]],[-1,27,[[58,[],[[57,[27]]]]]],[-1,27,[[58,[],[[57,[27]]]]]],[-1,28,[[58,[],[[57,[28]]]]]],[-1,28,[[58,[],[[57,[28]]]]]],[-1,29,[[58,[],[[57,[29]]]]]],[-1,29,[[58,[],[[57,[29]]]]]],[-1,20,[[58,[],[[57,[20]]]]]],[-1,20,[[58,[],[[57,[20]]]]]],[-1,21,[[58,[],[[57,[21]]]]]],[-1,21,[[58,[],[[57,[21]]]]]],[18,23],[18,[[46,[23]]]],[19,[[46,[23]]]],[29,[[46,[23]]]],[20,[[46,[23]]]],[21,[[46,[23]]]],[29,[[2,[19,23]]]],[22,[[46,[23]]]],[24,[[46,[23]]]],[25,[[46,[23]]]],[26,[[46,[23]]]],[27,[[46,[23]]]],[28,[[46,[23]]]],[22,[[46,[[46,[23]]]]]],[24,[[46,[[46,[23]]]]]],[25,[[46,[[46,[23]]]]]],[26,[[46,[[46,[23]]]]]],[27,[[46,[[46,[23]]]]]],[28,[[46,[[46,[23]]]]]],[[29,1],[[2,[23,23,23]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[22,[[2,[18,23,18]]]],[24,[[2,[19,29,19]]]],[28,[[2,[19,29,19]]]],[29,19],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[22,18],18],[[25,18],18],[[27,18],18],[[24,19],19],[[28,19],19],[[24,20],20],[[28,20],20],[[22,18],18],[[25,18],18],[[27,18],18],[[24,19],19],[[28,19],19],[[24,20],20],[[28,20],20],0,0,[25,25],[26,26],[27,27],[28,28],[18,18],[19,19],[20,20],[21,21],[19,18],[20,18],[21,19],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[18,[[59,[18]]]],[19,[[59,[19]]]],[20,[[59,[20]]]],[21,[[59,[21]]]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[[23,23],18],[[23,23,23],19],[[23,23,23],20],[[23,23,23,23],21],0,0,0,[[22,[56,[23]]],2],[[24,[56,[23]]],2],[[25,[56,[23]]],2],[[26,[56,[23]]],2],[[27,[56,[23]]],2],[[28,[56,[23]]],2],[[18,[56,[23]]],2],[[19,[56,[23]]],2],[[29,[56,[23]]],2],[[20,[56,[23]]],2],[[21,[56,[23]]],2],[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],0,0,0,0,0,0,0,0,0,[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[18,18],[19,18],[20,18],[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[18,19],[19,19],[20,20],[21,19],[21,21],[18,21],[19,21],[20,21],[21,21],[18,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[18,19],[19,19],[20,20],[21,19],[21,21],[18,21],[19,21],[20,21],[21,21],[18,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[18,18],[19,18],[20,18],[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[18,19],[19,19],[20,20],[21,19],[21,21],[18,21],[19,21],[20,21],[21,21],[18,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[18,19],[19,19],[20,20],[21,19],[21,21],[18,21],[19,21],[20,21],[21,21],[18,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[29,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,18],[20,18],[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],0,0,0,0,0,0,0,0,0,[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[18,18],[19,18],[20,18],[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[18,19],[19,19],[20,20],[21,19],[21,21],[18,21],[19,21],[20,21],[21,21],[18,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[18,19],[19,19],[20,20],[21,19],[21,21],[18,21],[19,21],[20,21],[21,21],[18,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[18,18],[19,18],[20,18],[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[18,19],[19,19],[20,20],[21,19],[21,21],[18,21],[19,21],[20,21],[21,21],[18,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[18,19],[19,19],[20,20],[21,19],[21,21],[18,21],[19,21],[20,21],[21,21],[18,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,18],[20,18],[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],0,0,0,0,0,0,0,[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[21,19],[21,21],[21,21],[21,21],[21,21],[19,18],[20,18],[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,18],[20,18],[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,18],[20,18],[21,18],[21,19],[21,21],[21,21],[21,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,19],[20,20],[21,19],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],[19,21],[20,21],[21,21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[34,34],[35,35],[36,36],[[60,60,61],3],[[62,62,61],3],[[30,30,61],3],[[31,31,61],3],[[32,32,61],3],[[33,33,61],3],[[34,34,61],3],[[35,35,61],3],[[36,36,61],3],[[30,30],-1,[]],[[31,31],-1,[]],[[32,32],-1,[]],[[33,33],33],[[34,34],34],[[34,61],34],[[35,61],35],[[35,35],35],[[36,36],36],[[36,61],36],[[30,30],2],[[31,31],2],[[32,32],2],[[34,61],2],[[34,34],2],[[35,61],2],[[35,35],2],[[36,36],2],[[36,61],2],[[30,30],30],[[31,31],31],[[32,32],32],[[33,33],61],[[34,34],61],[[35,35],61],[35,35],[35,[[2,[35,35]]]],[35,35],[33,29],[34,37],[35,38],[36,39],[34,40],[35,41],[36,42],[34,43],[35,44],[36,45],[30,26],[31,25],[32,28],[30,[[46,[61]]]],[31,[[46,[61]]]],[32,[[46,[61]]]],[34,[[46,[61]]]],[35,[[46,[61]]]],[36,[[46,[61]]]],[33,29],[30,[[46,[61]]]],[31,[[46,[61]]]],[32,[[46,[61]]]],[33,[[46,[61]]]],[34,[[46,[61]]]],[35,[[46,[61]]]],[36,[[46,[61]]]],[34,47],[35,48],[36,49],[34,50],[35,51],[36,52],[34,53],[35,54],[36,55],[34,18],[35,19],[35,20],[36,21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[35,35],[36,36],[[34,34,34],34],[[35,35,35],35],[[36,36,36],36],[[34,61,61],34],[[35,61,61],35],[[36,61,61],36],[[34,61],34],[[35,61],35],[[36,61],36],[[34,61],34],[[35,61],35],[[36,61],36],[60,60],[62,62],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[34,34],10],[[35,35],11],[[36,36],12],[[34,34],10],[[35,35],11],[[36,36],12],[[34,34],10],[[35,35],11],[[36,36],12],[[34,34],10],[[35,35],11],[[36,36],12],[[34,34],10],[[35,35],11],[[36,36],12],[[34,34],10],[[35,35],11],[[36,36],12],[[30,16],34],[[31,16],35],[[32,16],36],[[30,16],34],[[31,16],35],[[32,16],36],[33,33],[[34,34],34],[[35,35],35],[[36,36],36],[[35,35],35],[[],60],[[],62],[[],30],[[],31],[[],32],[[],33],[[],34],[[],35],[[],36],[60,-1,[]],[62,-1,[]],[60,-1,[]],[62,-1,[]],[30,61],[31,61],[32,61],[[34,34],61],[[35,35],61],[[36,36],61],[[34,34],61],[[35,35],61],[[36,36],61],[[33,61],33],[[34,61],34],[[34,34],34],[[35,35],35],[[35,61],35],[[36,36],36],[[36,61],36],[[34,61],2],[[34,34],2],[[35,61],2],[[35,35],2],[[36,61],2],[[36,36],2],[[34,34],34],[[35,35],35],[[36,36],36],[[34,34],30],[[35,35,35],31],[[36,36,36,36],32],[[33,33],61],[[34,34],61],[[35,35],61],[[36,36],61],[[34,34],34],[[35,35],35],[[36,36],36],[[61,61,61,61],33],[[61,61],34],[[61,61,61],35],[[61,61,61,61],36],[[60,60],3],[[62,62],3],[[30,30],3],[[31,31],3],[[32,32],3],[[33,33],3],[[34,34],3],[[35,35],3],[[36,36],3],[34,34],[35,35],[36,36],[[34,61],35],[[35,61],36],[34,34],[35,35],[36,36],[[60,4],5],[[60,4],5],[[62,4],5],[[62,4],5],[[30,4],5],[[30,4],5],[[31,4],5],[[31,4],5],[[32,4],5],[[32,4],5],[[33,4],5],[[33,4],5],[[34,4],5],[[34,4],5],[[35,4],5],[[35,4],5],[[36,4],5],[[36,4],5],[34,34],[35,35],[36,36],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[60,31],[62,32],[-1,-1,[]],[-1,-1,[]],[53,34],[43,34],[18,34],[-1,-1,[]],[[[2,[61,61]]],34],[[[46,[61]]],34],[19,35],[[[46,[61]]],35],[[[2,[34,61]]],35],[[[2,[61,61,61]]],35],[-1,-1,[]],[44,35],[54,35],[[[2,[61,61,61,61]]],36],[[[2,[61,35]]],36],[21,36],[-1,-1,[]],[[[2,[34,61,61]]],36],[[[46,[61]]],36],[45,36],[[[2,[34,34]]],36],[[[2,[35,61]]],36],[33,36],[55,36],[62,33],[61,60],[61,30],[61,31],[61,34],[[61,34],60],[[[46,[61]]],33],[[[46,[61]]],34],[[[46,[61]]],35],[[[46,[61]]],36],[[35,61],62],[[35,61],31],[[35,61],32],[[35,61],33],[[34,34,34],60],[[35,35,35,35],62],[[34,34],30],[[35,35,35],31],[[36,36,36,36],32],[[[46,[61]]],60],[[[46,[61]]],62],[[[46,[61]]],30],[[[46,[61]]],31],[[[46,[61]]],32],[[[46,[[46,[61]]]]],60],[[[46,[[46,[61]]]]],62],[[[46,[[46,[61]]]]],30],[[[46,[[46,[61]]]]],31],[[[46,[[46,[61]]]]],32],[[[56,[61]]],60],[[[56,[61]]],62],[[[56,[61]]],30],[[[56,[61]]],31],[[[56,[61]]],32],[34,30],[35,31],[36,32],[[1,61,61,61],31],[[1,61,61,61],32],[[1,61,61,61],33],[30,60],[30,31],[[30,34],60],[31,60],[31,62],[31,30],[31,32],[31,33],[[31,35],62],[32,62],[32,31],[32,33],[33,62],[33,31],[33,32],[[35,35],33],[[34,34],33],[[35,35],33],[[33,35],62],[[33,35],32],[61,62],[61,31],[61,32],[61,33],[61,62],[61,31],[61,32],[61,33],[61,62],[61,31],[61,32],[61,33],[34,60],[35,62],[34,31],[35,32],[[34,61],30],[[34,61,34],60],[[34,61,34],31],[[35,33,35],62],[[35,33,35],32],[35,33],[[[56,[61]]],33],[[[56,[61]]],34],[[[56,[61]]],35],[[[56,[61]]],36],[34,60],[35,62],[34,31],[35,32],[36,33],[[61,61,61,61],33],[[34,16],-1,[]],[[35,16],-1,[]],[[36,16],-1,[]],[[34,16],-1,[]],[[35,16],-1,[]],[[36,16],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[60,60],[62,62],[30,30],[31,31],[32,32],[33,33],[60,3],[62,3],[30,3],[31,3],[32,3],[33,3],[34,3],[35,3],[36,3],[60,3],[62,3],[30,3],[31,3],[32,3],[33,3],[34,3],[35,3],[36,3],[34,10],[35,11],[36,12],[33,3],[34,15],[35,15],[36,15],[33,3],[34,3],[35,3],[36,3],[33,61],[34,61],[35,61],[36,61],[33,61],[34,61],[35,61],[36,61],[33,61],[34,61],[35,61],[36,61],[[33,33,61],33],[[34,34,61],34],[[35,35,61],35],[[36,36,61],36],[[35,35,35],62],[[35,35,35],32],[[35,35,35],62],[[35,35,35],32],[[35,35,35],62],[[35,35,35],32],[[35,35,35],62],[[35,35,35],32],0,0,[[34,34],34],[[35,35],35],[[36,36],36],[34,61],[35,61],[36,61],[[34,34],34],[[35,35],35],[[36,36],36],[34,61],[35,61],[36,61],[[60,60],-1,[]],[[60,31],-1,[]],[[62,32],-1,[]],[[62,62],-1,[]],[[30,34],-1,[]],[[30,61],-1,[]],[[30,30],-1,[]],[[31,61],-1,[]],[[31,60],-1,[]],[[31,35],-1,[]],[[31,31],-1,[]],[[32,32],-1,[]],[[32,36],-1,[]],[[32,61],-1,[]],[[32,62],-1,[]],[[33,33],33],[[33,61],33],[[33,35],-1,[]],[[34,61],34],[[34,34],34],[[35,61],35],[[35,35],35],[[36,61],36],[[36,36],36],[[34,34,34],34],[[35,35,35],35],[[36,36,36],36],[[60,60],2],[[62,62],2],[[30,61],2],[[30,30],2],[[31,31],2],[[31,61],2],[[32,32],2],[[32,61],2],[[33,33],2],[[34,61],2],[[34,34],2],[[35,35],2],[[35,61],2],[[36,61],2],[[36,36],2],[[30,30],30],[[31,31],31],[[32,32],32],[[33,33],33],[[30,61],30],[[31,61],31],[[32,61],32],[[30,34],34],[[31,35],35],[[33,35],35],[[32,36],36],[30,-1,[]],[31,-1,[]],[32,-1,[]],[33,33],[34,34],[35,35],[36,36],[[61,61],34],[[61,61,61],35],[[61,61,61,61],36],[33,33],[34,34],[35,35],[36,36],[34,34],[35,35],[36,36],[[61,61,61,61,61,61],32],[[61,61,61,61,61,61],32],[[61,61,61,61,61,61],32],[34,34],[[34,34],61],[[61,61,61],32],[[61,61,61],32],[[61,61,61],32],[[61,61,61],32],[[61,61,61,61],32],[[61,61,61,61],32],[[61,61,61,61],32],[[34,61],34],[[35,61],35],[[36,61],36],[-1,60,[[58,[],[[57,[60]]]]]],[-1,62,[[58,[],[[57,[62]]]]]],[-1,30,[[58,[],[[57,[30]]]]]],[-1,30,[[58,[],[[57,[30]]]]]],[-1,31,[[58,[],[[57,[31]]]]]],[-1,31,[[58,[],[[57,[31]]]]]],[-1,32,[[58,[],[[57,[32]]]]]],[-1,32,[[58,[],[[57,[32]]]]]],[-1,33,[[58,[],[[57,[33]]]]]],[-1,33,[[58,[],[[57,[33]]]]]],[-1,34,[[58,[],[[57,[34]]]]]],[-1,34,[[58,[],[[57,[34]]]]]],[-1,35,[[58,[],[[57,[35]]]]]],[-1,35,[[58,[],[[57,[35]]]]]],[-1,36,[[58,[],[[57,[36]]]]]],[-1,36,[[58,[],[[57,[36]]]]]],[[34,34],34],[[35,35],35],[[36,36],36],[[34,34],34],[[35,35],35],[[36,36],36],[[32,35],35],[34,34],[35,35],[36,36],[[34,34],34],[[35,35],35],[[36,36],36],[[34,34],34],[[35,35],35],[[36,36],36],[[34,34],34],[[34,61],34],[[35,35],35],[[35,61],35],[[36,36],36],[[36,61],36],[[34,61],2],[[34,34],2],[[35,61],2],[[35,35],2],[[36,36],2],[[36,61],2],[[34,34],34],[[35,35],35],[[36,36],36],[[34,34],34],[34,34],[35,35],[36,36],[[30,16],34],[[31,16],35],[[32,16],36],[[10,34,34],34],[[11,35,35],35],[[12,36,36],36],[34,34],[35,35],[36,36],[[33,33,61],33],[61,34],[61,35],[61,36],[[30,30],-1,[]],[[31,31],-1,[]],[[32,32],-1,[]],[[33,33],33],[[34,61],34],[[34,34],34],[[35,61],35],[[35,35],35],[[36,61],36],[[36,36],36],[[30,30],2],[[31,31],2],[[32,32],2],[[34,61],2],[[34,34],2],[[35,35],2],[[35,61],2],[[36,61],2],[[36,36],2],[[30,30],30],[[31,31],31],[[32,32],32],[-1,30,[[58,[],[[57,[30]]]]]],[-1,30,[[58,[],[[57,[30]]]]]],[-1,31,[[58,[],[[57,[31]]]]]],[-1,31,[[58,[],[[57,[31]]]]]],[-1,32,[[58,[],[[57,[32]]]]]],[-1,32,[[58,[],[[57,[32]]]]]],[-1,33,[[58,[],[[57,[33]]]]]],[-1,33,[[58,[],[[57,[33]]]]]],[-1,34,[[58,[],[[57,[34]]]]]],[-1,34,[[58,[],[[57,[34]]]]]],[-1,35,[[58,[],[[57,[35]]]]]],[-1,35,[[58,[],[[57,[35]]]]]],[-1,36,[[58,[],[[57,[36]]]]]],[-1,36,[[58,[],[[57,[36]]]]]],[34,61],[33,[[46,[61]]]],[34,[[46,[61]]]],[35,[[46,[61]]]],[36,[[46,[61]]]],[33,[[2,[35,61]]]],[60,[[46,[61]]]],[62,[[46,[61]]]],[30,[[46,[61]]]],[31,[[46,[61]]]],[32,[[46,[61]]]],[60,[[46,[[46,[61]]]]]],[62,[[46,[[46,[61]]]]]],[30,[[46,[[46,[61]]]]]],[31,[[46,[[46,[61]]]]]],[32,[[46,[[46,[61]]]]]],[[33,1],[[2,[61,61,61]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[60,[[2,[34,61,34]]]],[62,[[2,[35,33,35]]]],[32,[[2,[35,33,35]]]],[33,35],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[60,34],34],[[31,34],34],[[62,35],35],[[32,35],35],[[60,34],34],[[31,34],34],[[62,35],35],[[32,35],35],0,0,[30,30],[31,31],[32,32],[34,34],[35,35],[36,36],[35,34],[36,35],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[34,[[59,[34]]]],[35,[[59,[35]]]],[36,[[59,[36]]]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0,0,0,[[60,[56,[61]]],2],[[62,[56,[61]]],2],[[30,[56,[61]]],2],[[31,[56,[61]]],2],[[32,[56,[61]]],2],[[33,[56,[61]]],2],[[34,[56,[61]]],2],[[35,[56,[61]]],2],[[36,[56,[61]]],2],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],0,0,0,0,0,0,0,[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[34,34],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[34,34],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[33,35],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],0,0,0,0,0,0,0,[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[34,34],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[34,34],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],0,0,0,0,0,[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[37,37],[38,38],[39,39],[[37,63],37],[[37,37],37],[[38,38],38],[[38,63],38],[[39,39],39],[[39,63],39],[[37,37],2],[[37,63],2],[[38,38],2],[[38,63],2],[[39,63],2],[[39,39],2],[37,34],[38,35],[39,36],[37,40],[38,41],[39,42],[37,43],[38,44],[39,45],[37,[[46,[63]]]],[38,[[46,[63]]]],[39,[[46,[63]]]],[37,[[46,[63]]]],[38,[[46,[63]]]],[39,[[46,[63]]]],[37,47],[38,48],[39,49],[37,50],[38,51],[39,52],[37,53],[38,54],[39,55],[37,18],[38,19],[38,20],[39,21],[[37,37],-1,[]],[[37,63],-1,[]],[[38,63],-1,[]],[[38,38],-1,[]],[[39,39],-1,[]],[[39,63],-1,[]],[[37,37],-1,[]],[[37,63],-1,[]],[[38,38],-1,[]],[[38,63],-1,[]],[[39,63],-1,[]],[[39,39],-1,[]],[[37,37],-1,[]],[[37,63],-1,[]],[[38,63],-1,[]],[[38,38],-1,[]],[[39,39],-1,[]],[[39,63],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[37,37,37],37],[[38,38,38],38],[[39,39,39],39],[37,37],[38,38],[39,39],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[37,37],10],[[38,38],11],[[39,39],12],[[37,37],10],[[38,38],11],[[39,39],12],[[37,37],10],[[38,38],11],[[39,39],12],[[37,37],10],[[38,38],11],[[39,39],12],[[37,37],10],[[38,38],11],[[39,39],12],[[37,37],10],[[38,38],11],[[39,39],12],[[38,38],38],[[],37],[[],38],[[],39],[[37,37],63],[[38,38],63],[[39,39],63],[[37,37],37],[[37,63],37],[[38,63],38],[[38,38],38],[[39,39],39],[[39,63],39],[[37,37],2],[[37,63],2],[[38,38],2],[[38,63],2],[[39,63],2],[[39,39],2],[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],63],[[38,38],63],[[39,39],63],[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],3],[[38,38],3],[[39,39],3],[[37,63],38],[[38,63],39],[[37,4],5],[[37,4],5],[[38,4],5],[[38,4],5],[[39,4],5],[[39,4],5],[[[2,[63,63]]],37],[-1,-1,[]],[[[46,[63]]],37],[[[2,[63,63,63]]],38],[-1,-1,[]],[[[2,[37,63]]],38],[[[46,[63]]],38],[[[46,[63]]],39],[-1,-1,[]],[[[2,[37,63,63]]],39],[[[2,[38,63]]],39],[[[2,[37,37]]],39],[[[2,[63,63,63,63]]],39],[[[2,[63,38]]],39],[[[46,[63]]],37],[[[46,[63]]],38],[[[46,[63]]],39],[[[56,[63]]],37],[[[56,[63]]],38],[[[56,[63]]],39],[[37,-1],2,6],[[38,-1],2,6],[[39,-1],2,6],[[63,63],37],[[63,63,63],38],[[63,63,63,63],39],[[37,16],-1,[]],[[38,16],-1,[]],[[39,16],-1,[]],[[37,16],-1,[]],[[38,16],-1,[]],[[39,16],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,15],[38,15],[39,15],[37,63],[38,63],[39,63],[[37,37],37],[[38,38],38],[[39,39],39],[37,63],[38,63],[39,63],[[37,37],37],[[38,38],38],[[39,39],39],[37,63],[38,63],[39,63],[[37,37],37],[[37,63],37],[[38,63],38],[[38,38],38],[[39,63],39],[[39,39],39],[[37,63],2],[[37,37],2],[[38,38],2],[[38,63],2],[[39,39],2],[[39,63],2],[37,37],[38,38],[39,39],[[63,63],37],[[63,63,63],38],[[63,63,63,63],39],[37,-1,[]],[38,-1,[]],[39,-1,[]],[37,37],[[37,37],63],[-1,37,[[58,[],[[57,[37]]]]]],[-1,37,[[58,[],[[57,[37]]]]]],[-1,38,[[58,[],[[57,[38]]]]]],[-1,38,[[58,[],[[57,[38]]]]]],[-1,39,[[58,[],[[57,[39]]]]]],[-1,39,[[58,[],[[57,[39]]]]]],[[37,37],37],[[37,63],37],[[38,63],38],[[38,38],38],[[39,63],39],[[39,39],39],[[37,37],2],[[37,63],2],[[38,38],2],[[38,63],2],[[39,39],2],[[39,63],2],[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],37],[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],37],[[38,38],38],[[39,39],39],[[10,37,37],37],[[11,38,38],38],[[12,39,39],39],[[37,64],-1,[]],[[37,65],-1,[]],[[37,66],-1,[]],[[37,63],-1,[]],[[37,67],-1,[]],[[37,15],-1,[]],[[37,53],-1,[]],[[37,68],-1,[]],[[37,43],-1,[]],[[37,69],-1,[]],[[38,69],-1,[]],[[38,63],-1,[]],[[38,67],-1,[]],[[38,44],-1,[]],[[38,54],-1,[]],[[38,64],-1,[]],[[38,65],-1,[]],[[38,66],-1,[]],[[38,15],-1,[]],[[38,68],-1,[]],[[39,65],-1,[]],[[39,68],-1,[]],[[39,67],-1,[]],[[39,15],-1,[]],[[39,63],-1,[]],[[39,55],-1,[]],[[39,64],-1,[]],[[39,66],-1,[]],[[39,69],-1,[]],[[39,45],-1,[]],[[37,63],-1,[]],[[37,68],-1,[]],[[37,53],-1,[]],[[37,69],-1,[]],[[37,15],-1,[]],[[37,43],-1,[]],[[37,65],-1,[]],[[37,66],-1,[]],[[37,64],-1,[]],[[37,67],-1,[]],[[38,63],-1,[]],[[38,67],-1,[]],[[38,65],-1,[]],[[38,44],-1,[]],[[38,69],-1,[]],[[38,68],-1,[]],[[38,15],-1,[]],[[38,66],-1,[]],[[38,54],-1,[]],[[38,64],-1,[]],[[39,63],-1,[]],[[39,69],-1,[]],[[39,64],-1,[]],[[39,15],-1,[]],[[39,45],-1,[]],[[39,68],-1,[]],[[39,55],-1,[]],[[39,67],-1,[]],[[39,66],-1,[]],[[39,65],-1,[]],[37,37],[38,38],[39,39],[63,37],[63,38],[63,39],[[37,63],37],[[37,37],37],[[38,38],38],[[38,63],38],[[39,63],39],[[39,39],39],[[37,63],2],[[37,37],2],[[38,63],2],[[38,38],2],[[39,63],2],[[39,39],2],[-1,37,[[58,[],[[57,[37]]]]]],[-1,37,[[58,[],[[57,[37]]]]]],[-1,38,[[58,[],[[57,[38]]]]]],[-1,38,[[58,[],[[57,[38]]]]]],[-1,39,[[58,[],[[57,[39]]]]]],[-1,39,[[58,[],[[57,[39]]]]]],[37,[[46,[63]]]],[38,[[46,[63]]]],[39,[[46,[63]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[38,37],[39,38],[40,[[8,[37,-1]]],[]],[-1,[[8,[-2]]],[],[]],[53,[[8,[37,-1]]],[]],[43,[[8,[37,-1]]],[]],[47,[[8,[37,-1]]],[]],[50,[[8,[37,-1]]],[]],[51,[[8,[38,-1]]],[]],[48,[[8,[38,-1]]],[]],[-1,[[8,[-2]]],[],[]],[41,[[8,[38,-1]]],[]],[44,[[8,[38,-1]]],[]],[54,[[8,[38,-1]]],[]],[-1,[[8,[-2]]],[],[]],[49,[[8,[39,-1]]],[]],[55,[[8,[39,-1]]],[]],[42,[[8,[39,-1]]],[]],[52,[[8,[39,-1]]],[]],[45,[[8,[39,-1]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0,[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],37],[[38,38],38],[[39,39],39],[[37,37],37],[[38,38],38],[[39,39],39],[[37,[56,[63]]],2],[[38,[56,[63]]],2],[[39,[56,[63]]],2],[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],0,0,0,[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[37,37],[38,37],[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[37,38],[38,38],[39,38],[39,39],[37,39],[38,39],[39,39],[37,39],[38,39],[39,39],[38,39],[39,39],[37,38],[38,38],[39,38],[39,39],[37,39],[38,39],[39,39],[37,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[37,37],[38,37],[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[37,38],[38,38],[39,38],[39,39],[37,39],[38,39],[39,39],[37,39],[38,39],[39,39],[38,39],[39,39],[37,38],[38,38],[39,38],[39,39],[37,39],[38,39],[39,39],[37,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,37],[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],0,0,0,[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[37,37],[38,37],[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[37,38],[38,38],[39,38],[39,39],[37,39],[38,39],[39,39],[37,39],[38,39],[39,39],[38,39],[39,39],[37,38],[38,38],[39,38],[39,39],[37,39],[38,39],[39,39],[37,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[37,37],[38,37],[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[37,38],[38,38],[39,38],[39,39],[37,39],[38,39],[39,39],[37,39],[38,39],[39,39],[38,39],[39,39],[37,38],[38,38],[39,38],[39,39],[37,39],[38,39],[39,39],[37,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,37],[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],0,0,[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[39,38],[39,39],[39,39],[39,39],[39,39],[38,37],[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,37],[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,37],[39,37],[39,38],[39,39],[39,39],[39,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],[38,38],[39,38],[39,39],[38,39],[39,39],[38,39],[39,39],[38,39],[39,39],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[43,43],[44,44],[45,45],[[43,43],43],[[43,65],43],[[44,65],44],[[44,44],44],[[45,65],45],[[45,45],45],[[43,65],2],[[43,43],2],[[44,65],2],[[44,44],2],[[45,65],2],[[45,45],2],[43,34],[44,35],[45,36],[43,37],[44,38],[45,39],[43,40],[44,41],[45,42],[43,[[46,[65]]]],[44,[[46,[65]]]],[45,[[46,[65]]]],[43,[[46,[65]]]],[44,[[46,[65]]]],[45,[[46,[65]]]],[43,47],[44,48],[45,49],[43,50],[44,51],[45,52],[43,53],[44,54],[45,55],[43,18],[44,19],[44,20],[45,21],[[43,43],-1,[]],[[43,65],-1,[]],[[44,65],-1,[]],[[44,44],-1,[]],[[45,45],-1,[]],[[45,65],-1,[]],[[43,65],-1,[]],[[43,43],-1,[]],[[44,44],-1,[]],[[44,65],-1,[]],[[45,45],-1,[]],[[45,65],-1,[]],[[43,43],-1,[]],[[43,65],-1,[]],[[44,44],-1,[]],[[44,65],-1,[]],[[45,45],-1,[]],[[45,65],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[43,43,43],43],[[44,44,44],44],[[45,45,45],45],[43,43],[44,44],[45,45],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[43,43],10],[[44,44],11],[[45,45],12],[[43,43],10],[[44,44],11],[[45,45],12],[[43,43],10],[[44,44],11],[[45,45],12],[[43,43],10],[[44,44],11],[[45,45],12],[[43,43],10],[[44,44],11],[[45,45],12],[[43,43],10],[[44,44],11],[[45,45],12],[[44,44],44],[[],43],[[],44],[[],45],[[43,43],65],[[44,44],65],[[45,45],65],[[43,43],43],[[43,65],43],[[44,44],44],[[44,65],44],[[45,65],45],[[45,45],45],[[43,43],2],[[43,65],2],[[44,65],2],[[44,44],2],[[45,45],2],[[45,65],2],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],65],[[44,44],65],[[45,45],65],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],3],[[44,44],3],[[45,45],3],[[43,65],44],[[44,65],45],[[43,4],5],[[43,4],5],[[44,4],5],[[44,4],5],[[45,4],5],[[45,4],5],[-1,-1,[]],[47,43],[[[2,[65,65]]],43],[37,43],[[[46,[65]]],43],[[[2,[43,65]]],44],[[[2,[65,65,65]]],44],[38,44],[[[46,[65]]],44],[-1,-1,[]],[48,44],[[[2,[43,43]]],45],[[[2,[44,65]]],45],[49,45],[[[2,[65,44]]],45],[[[2,[43,65,65]]],45],[-1,-1,[]],[[[46,[65]]],45],[[[2,[65,65,65,65]]],45],[39,45],[[[46,[65]]],43],[[[46,[65]]],44],[[[46,[65]]],45],[[[56,[65]]],43],[[[56,[65]]],44],[[[56,[65]]],45],[[43,-1],2,6],[[44,-1],2,6],[[45,-1],2,6],[[43,16],-1,[]],[[44,16],-1,[]],[[45,16],-1,[]],[[43,16],-1,[]],[[44,16],-1,[]],[[45,16],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[43,15],[44,15],[45,15],[[65,65],43],[[65,65,65],44],[[65,65,65,65],45],[43,65],[44,65],[45,65],[[43,43],43],[[44,44],44],[[45,45],45],[43,65],[44,65],[45,65],[[43,43],43],[[44,44],44],[[45,45],45],[43,65],[44,65],[45,65],[[43,43],43],[[43,65],43],[[44,65],44],[[44,44],44],[[45,65],45],[[45,45],45],[[43,65],2],[[43,43],2],[[44,65],2],[[44,44],2],[[45,45],2],[[45,65],2],[43,43],[44,44],[45,45],[[65,65],43],[[65,65,65],44],[[65,65,65,65],45],[43,-1,[]],[44,-1,[]],[45,-1,[]],[43,43],[[43,43],65],[-1,43,[[58,[],[[57,[43]]]]]],[-1,43,[[58,[],[[57,[43]]]]]],[-1,44,[[58,[],[[57,[44]]]]]],[-1,44,[[58,[],[[57,[44]]]]]],[-1,45,[[58,[],[[57,[45]]]]]],[-1,45,[[58,[],[[57,[45]]]]]],[[43,65],43],[[43,43],43],[[44,44],44],[[44,65],44],[[45,65],45],[[45,45],45],[[43,43],2],[[43,65],2],[[44,65],2],[[44,44],2],[[45,65],2],[[45,45],2],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],43],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],43],[[44,44],44],[[45,45],45],[[10,43,43],43],[[11,44,44],44],[[12,45,45],45],[[43,65],-1,[]],[[43,53],-1,[]],[[43,68],-1,[]],[[43,69],-1,[]],[[43,15],-1,[]],[[43,66],-1,[]],[[43,43],-1,[]],[[43,63],-1,[]],[[43,64],-1,[]],[[43,67],-1,[]],[[44,68],-1,[]],[[44,65],-1,[]],[[44,54],-1,[]],[[44,66],-1,[]],[[44,69],-1,[]],[[44,63],-1,[]],[[44,67],-1,[]],[[44,64],-1,[]],[[44,44],-1,[]],[[44,15],-1,[]],[[45,63],-1,[]],[[45,65],-1,[]],[[45,66],-1,[]],[[45,15],-1,[]],[[45,68],-1,[]],[[45,67],-1,[]],[[45,55],-1,[]],[[45,64],-1,[]],[[45,45],-1,[]],[[45,69],-1,[]],[[43,43],-1,[]],[[43,53],-1,[]],[[43,15],-1,[]],[[43,67],-1,[]],[[43,65],-1,[]],[[43,64],-1,[]],[[43,66],-1,[]],[[43,63],-1,[]],[[43,69],-1,[]],[[43,68],-1,[]],[[44,15],-1,[]],[[44,67],-1,[]],[[44,54],-1,[]],[[44,69],-1,[]],[[44,66],-1,[]],[[44,68],-1,[]],[[44,65],-1,[]],[[44,63],-1,[]],[[44,44],-1,[]],[[44,64],-1,[]],[[45,64],-1,[]],[[45,15],-1,[]],[[45,63],-1,[]],[[45,69],-1,[]],[[45,67],-1,[]],[[45,68],-1,[]],[[45,45],-1,[]],[[45,55],-1,[]],[[45,65],-1,[]],[[45,66],-1,[]],[43,43],[44,44],[45,45],[65,43],[65,44],[65,45],[[43,65],43],[[43,43],43],[[44,44],44],[[44,65],44],[[45,65],45],[[45,45],45],[[43,43],2],[[43,65],2],[[44,65],2],[[44,44],2],[[45,45],2],[[45,65],2],[-1,43,[[58,[],[[57,[43]]]]]],[-1,43,[[58,[],[[57,[43]]]]]],[-1,44,[[58,[],[[57,[44]]]]]],[-1,44,[[58,[],[[57,[44]]]]]],[-1,45,[[58,[],[[57,[45]]]]]],[-1,45,[[58,[],[[57,[45]]]]]],[43,[[46,[65]]]],[44,[[46,[65]]]],[45,[[46,[65]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[44,43],[45,44],[40,[[8,[43,-1]]],[]],[-1,[[8,[-2]]],[],[]],[53,[[8,[43,-1]]],[]],[50,[[8,[43,-1]]],[]],[54,[[8,[44,-1]]],[]],[41,[[8,[44,-1]]],[]],[-1,[[8,[-2]]],[],[]],[51,[[8,[44,-1]]],[]],[42,[[8,[45,-1]]],[]],[-1,[[8,[-2]]],[],[]],[52,[[8,[45,-1]]],[]],[55,[[8,[45,-1]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0,[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],43],[[44,44],44],[[45,45],45],[[43,[56,[65]]],2],[[44,[56,[65]]],2],[[45,[56,[65]]],2],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],0,0,0,[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[43,43],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[43,43],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],0,0,0,[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[43,43],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[43,43],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[43,44],[44,44],[45,44],[45,45],[43,45],[44,45],[45,45],[43,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],0,0,[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[45,44],[45,45],[45,45],[45,45],[45,45],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,43],[45,43],[45,44],[45,45],[45,45],[45,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],[44,44],[45,44],[45,45],[44,45],[45,45],[44,45],[45,45],[44,45],[45,45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[40,40],[41,41],[42,42],[[40,40],40],[[40,67],40],[[41,67],41],[[41,41],41],[[42,42],42],[[42,67],42],[[40,67],2],[[40,40],2],[[41,67],2],[[41,41],2],[[42,42],2],[[42,67],2],[40,34],[41,35],[42,36],[40,37],[41,38],[42,39],[40,43],[41,44],[42,45],[40,[[46,[67]]]],[41,[[46,[67]]]],[42,[[46,[67]]]],[40,[[46,[67]]]],[41,[[46,[67]]]],[42,[[46,[67]]]],[40,47],[41,48],[42,49],[40,50],[41,51],[42,52],[40,53],[41,54],[42,55],[40,18],[41,19],[41,20],[42,21],[[40,67],-1,[]],[[40,40],-1,[]],[[41,67],-1,[]],[[41,41],-1,[]],[[42,67],-1,[]],[[42,42],-1,[]],[[40,67],-1,[]],[[40,40],-1,[]],[[41,67],-1,[]],[[41,41],-1,[]],[[42,67],-1,[]],[[42,42],-1,[]],[[40,40],-1,[]],[[40,67],-1,[]],[[41,41],-1,[]],[[41,67],-1,[]],[[42,42],-1,[]],[[42,67],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[40,40,40],40],[[41,41,41],41],[[42,42,42],42],[40,40],[41,41],[42,42],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[40,40],10],[[41,41],11],[[42,42],12],[[40,40],10],[[41,41],11],[[42,42],12],[[40,40],10],[[41,41],11],[[42,42],12],[[40,40],10],[[41,41],11],[[42,42],12],[[40,40],10],[[41,41],11],[[42,42],12],[[40,40],10],[[41,41],11],[[42,42],12],[[41,41],41],[[],40],[[],41],[[],42],[[40,40],67],[[41,41],67],[[42,42],67],[[40,40],40],[[40,67],40],[[41,41],41],[[41,67],41],[[42,67],42],[[42,42],42],[[40,67],2],[[40,40],2],[[41,41],2],[[41,67],2],[[42,42],2],[[42,67],2],[[40,40],40],[[41,41],41],[[42,42],42],[[40,40],67],[[41,41],67],[[42,42],67],[[40,40],40],[[41,41],41],[[42,42],42],[[40,40],3],[[41,41],3],[[42,42],3],[[40,67],41],[[41,67],42],[[40,4],5],[[40,4],5],[[41,4],5],[[41,4],5],[[42,4],5],[[42,4],5],[[[46,[67]]],40],[43,40],[47,40],[53,40],[[[2,[67,67]]],40],[37,40],[-1,-1,[]],[54,41],[[[2,[67,67,67]]],41],[[[46,[67]]],41],[44,41],[-1,-1,[]],[[[2,[40,67]]],41],[48,41],[38,41],[[[2,[67,67,67,67]]],42],[[[46,[67]]],42],[[[2,[41,67]]],42],[[[2,[67,41]]],42],[[[2,[40,40]]],42],[55,42],[49,42],[45,42],[-1,-1,[]],[39,42],[[[2,[40,67,67]]],42],[[[46,[67]]],40],[[[46,[67]]],41],[[[46,[67]]],42],[[[56,[67]]],40],[[[56,[67]]],41],[[[56,[67]]],42],[[40,-1],2,6],[[41,-1],2,6],[[42,-1],2,6],[[67,67],40],[[67,67,67],41],[[67,67,67,67],42],[[40,16],-1,[]],[[41,16],-1,[]],[[42,16],-1,[]],[[40,16],-1,[]],[[41,16],-1,[]],[[42,16],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,15],[41,15],[42,15],[40,67],[41,67],[42,67],[[40,40],40],[[41,41],41],[[42,42],42],[40,67],[41,67],[42,67],[[40,40],40],[[41,41],41],[[42,42],42],[40,67],[41,67],[42,67],[[40,40],40],[[40,67],40],[[41,41],41],[[41,67],41],[[42,42],42],[[42,67],42],[[40,67],2],[[40,40],2],[[41,67],2],[[41,41],2],[[42,67],2],[[42,42],2],[40,40],[41,41],[42,42],[[67,67],40],[[67,67,67],41],[[67,67,67,67],42],[40,-1,[]],[41,-1,[]],[42,-1,[]],[40,40],[[40,40],67],[-1,40,[[58,[],[[57,[40]]]]]],[-1,40,[[58,[],[[57,[40]]]]]],[-1,41,[[58,[],[[57,[41]]]]]],[-1,41,[[58,[],[[57,[41]]]]]],[-1,42,[[58,[],[[57,[42]]]]]],[-1,42,[[58,[],[[57,[42]]]]]],[[40,67],40],[[40,40],40],[[41,67],41],[[41,41],41],[[42,42],42],[[42,67],42],[[40,40],2],[[40,67],2],[[41,67],2],[[41,41],2],[[42,67],2],[[42,42],2],[[40,40],40],[[41,41],41],[[42,42],42],[[40,40],40],[[40,40],40],[[41,41],41],[[42,42],42],[[40,40],40],[[41,41],41],[[42,42],42],[[40,40],40],[[41,41],41],[[42,42],42],[[40,40],40],[[41,41],41],[[42,42],42],[[10,40,40],40],[[11,41,41],41],[[12,42,42],42],[[40,64],-1,[]],[[40,69],-1,[]],[[40,68],-1,[]],[[40,53],-1,[]],[[40,15],-1,[]],[[40,67],-1,[]],[[40,65],-1,[]],[[40,43],-1,[]],[[40,66],-1,[]],[[40,63],-1,[]],[[41,44],-1,[]],[[41,66],-1,[]],[[41,68],-1,[]],[[41,65],-1,[]],[[41,15],-1,[]],[[41,63],-1,[]],[[41,64],-1,[]],[[41,67],-1,[]],[[41,54],-1,[]],[[41,69],-1,[]],[[42,55],-1,[]],[[42,65],-1,[]],[[42,66],-1,[]],[[42,68],-1,[]],[[42,15],-1,[]],[[42,69],-1,[]],[[42,67],-1,[]],[[42,64],-1,[]],[[42,45],-1,[]],[[42,63],-1,[]],[[40,65],-1,[]],[[40,64],-1,[]],[[40,53],-1,[]],[[40,69],-1,[]],[[40,43],-1,[]],[[40,67],-1,[]],[[40,15],-1,[]],[[40,63],-1,[]],[[40,66],-1,[]],[[40,68],-1,[]],[[41,64],-1,[]],[[41,66],-1,[]],[[41,65],-1,[]],[[41,69],-1,[]],[[41,63],-1,[]],[[41,15],-1,[]],[[41,54],-1,[]],[[41,68],-1,[]],[[41,44],-1,[]],[[41,67],-1,[]],[[42,67],-1,[]],[[42,66],-1,[]],[[42,55],-1,[]],[[42,45],-1,[]],[[42,69],-1,[]],[[42,64],-1,[]],[[42,68],-1,[]],[[42,63],-1,[]],[[42,15],-1,[]],[[42,65],-1,[]],[40,40],[41,41],[42,42],[67,40],[67,41],[67,42],[[40,67],40],[[40,40],40],[[41,67],41],[[41,41],41],[[42,67],42],[[42,42],42],[[40,40],2],[[40,67],2],[[41,41],2],[[41,67],2],[[42,42],2],[[42,67],2],[-1,40,[[58,[],[[57,[40]]]]]],[-1,40,[[58,[],[[57,[40]]]]]],[-1,41,[[58,[],[[57,[41]]]]]],[-1,41,[[58,[],[[57,[41]]]]]],[-1,42,[[58,[],[[57,[42]]]]]],[-1,42,[[58,[],[[57,[42]]]]]],[40,[[46,[67]]]],[41,[[46,[67]]]],[42,[[46,[67]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[41,40],[42,41],[-1,[[8,[-2]]],[],[]],[50,[[8,[40,-1]]],[]],[-1,[[8,[-2]]],[],[]],[51,[[8,[41,-1]]],[]],[-1,[[8,[-2]]],[],[]],[52,[[8,[42,-1]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0,[[40,40],40],[[41,41],41],[[42,42],42],[[40,40],40],[[41,41],41],[[42,42],42],[[40,40],40],[[41,41],41],[[42,42],42],[[40,40],40],[[41,41],41],[[42,42],42],[[40,[56,[67]]],2],[[41,[56,[67]]],2],[[42,[56,[67]]],2],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],0,0,0,[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[40,40],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[40,40],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],0,0,0,[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[40,40],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[40,40],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],0,0,[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],0,0,0,0,0,0,0,0,0,[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],[[74,[],[[71,[-1]],[73,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-1,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-1,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],[[74,[],[[71,[-1]],[73,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],[[74,[],[[71,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-1,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-1,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],[[74,[],[[71,[-1]],[73,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-1,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-1,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],[[74,[],[[71,[-1]],[73,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-1,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-1,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[74,[],[[71,[-1]],[73,[-2]]]]],-2,[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-1,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],[[75,[],[[70,[-1]],[73,[-2]]]]],[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],[[[75,[],[[70,[-1]],[73,[-2]]]]],-2,[],[]],[[[72,[],[[70,[-1]],[71,[-2]]]]],[[72,[],[[70,[-1]],[71,[-2]]]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[47,47],47],[[47,64],47],[[48,48],48],[[48,64],48],[[49,49],49],[[49,64],49],[[47,64],2],[[47,47],2],[[48,64],2],[[48,48],2],[[49,64],2],[[49,49],2],[47,34],[48,35],[49,36],[47,37],[48,38],[49,39],[47,40],[48,41],[49,42],[47,43],[48,44],[49,45],[47,[[46,[64]]]],[48,[[46,[64]]]],[49,[[46,[64]]]],[47,[[46,[64]]]],[48,[[46,[64]]]],[49,[[46,[64]]]],[47,50],[48,51],[49,52],[47,53],[48,54],[49,55],[47,18],[48,19],[48,20],[49,21],[[47,64],-1,[]],[[47,47],-1,[]],[[48,64],-1,[]],[[48,48],-1,[]],[[49,49],-1,[]],[[49,64],-1,[]],[[47,47],-1,[]],[[47,64],-1,[]],[[48,48],-1,[]],[[48,64],-1,[]],[[49,49],-1,[]],[[49,64],-1,[]],[[47,47],-1,[]],[[47,64],-1,[]],[[48,64],-1,[]],[[48,48],-1,[]],[[49,49],-1,[]],[[49,64],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[47,47,47],47],[[48,48,48],48],[[49,49,49],49],[47,47],[48,48],[49,49],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[47,47],10],[[48,48],11],[[49,49],12],[[47,47],10],[[48,48],11],[[49,49],12],[[47,47],10],[[48,48],11],[[49,49],12],[[47,47],10],[[48,48],11],[[49,49],12],[[47,47],10],[[48,48],11],[[49,49],12],[[47,47],10],[[48,48],11],[[49,49],12],[[48,48],48],[[],47],[[],48],[[],49],[[47,47],47],[[47,64],47],[[48,64],48],[[48,48],48],[[49,64],49],[[49,49],49],[[47,47],2],[[47,64],2],[[48,48],2],[[48,64],2],[[49,64],2],[[49,49],2],[[47,47],64],[[48,48],64],[[49,49],64],[[47,47],47],[[48,48],48],[[49,49],49],[[47,47],3],[[48,48],3],[[49,49],3],[[47,64],48],[[48,64],49],[[47,4],5],[[47,4],5],[[48,4],5],[[48,4],5],[[49,4],5],[[49,4],5],[-1,-1,[]],[[[2,[64,64]]],47],[[[46,[64]]],47],[[[2,[64,64,64]]],48],[[[2,[47,64]]],48],[[[46,[64]]],48],[-1,-1,[]],[[[2,[64,64,64,64]]],49],[[[2,[64,48]]],49],[[[2,[47,47]]],49],[-1,-1,[]],[[[2,[48,64]]],49],[[[2,[47,64,64]]],49],[[[46,[64]]],49],[[[46,[64]]],47],[[[46,[64]]],48],[[[46,[64]]],49],[[[56,[64]]],47],[[[56,[64]]],48],[[[56,[64]]],49],[[47,-1],2,6],[[48,-1],2,6],[[49,-1],2,6],[[47,16],-1,[]],[[48,16],-1,[]],[[49,16],-1,[]],[[47,16],-1,[]],[[48,16],-1,[]],[[49,16],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[47,64],[48,64],[49,64],[[47,47],47],[[48,48],48],[[49,49],49],[47,64],[48,64],[49,64],[[47,47],47],[[48,48],48],[[49,49],49],[47,64],[48,64],[49,64],[[47,47],47],[[47,64],47],[[48,64],48],[[48,48],48],[[49,64],49],[[49,49],49],[[47,64],2],[[47,47],2],[[48,48],2],[[48,64],2],[[49,64],2],[[49,49],2],[[64,64],47],[[64,64,64],48],[[64,64,64,64],49],[47,-1,[]],[48,-1,[]],[49,-1,[]],[-1,47,[[58,[],[[57,[47]]]]]],[-1,47,[[58,[],[[57,[47]]]]]],[-1,48,[[58,[],[[57,[48]]]]]],[-1,48,[[58,[],[[57,[48]]]]]],[-1,49,[[58,[],[[57,[49]]]]]],[-1,49,[[58,[],[[57,[49]]]]]],[[47,64],47],[[47,47],47],[[48,64],48],[[48,48],48],[[49,64],49],[[49,49],49],[[47,64],2],[[47,47],2],[[48,48],2],[[48,64],2],[[49,64],2],[[49,49],2],[[47,47],47],[[48,48],48],[[49,49],49],[[47,47],47],[[48,48],48],[[49,49],49],[[47,47],47],[[48,48],48],[[49,49],49],[[47,47],47],[[48,48],48],[[49,49],49],[[10,47,47],47],[[11,48,48],48],[[12,49,49],49],[[47,15],-1,[]],[[47,53],-1,[]],[[47,64],-1,[]],[[47,67],-1,[]],[[47,65],-1,[]],[[47,68],-1,[]],[[47,63],-1,[]],[[47,66],-1,[]],[[47,43],-1,[]],[[47,69],-1,[]],[[48,65],-1,[]],[[48,64],-1,[]],[[48,44],-1,[]],[[48,68],-1,[]],[[48,66],-1,[]],[[48,54],-1,[]],[[48,63],-1,[]],[[48,15],-1,[]],[[48,69],-1,[]],[[48,67],-1,[]],[[49,67],-1,[]],[[49,15],-1,[]],[[49,66],-1,[]],[[49,64],-1,[]],[[49,55],-1,[]],[[49,65],-1,[]],[[49,69],-1,[]],[[49,45],-1,[]],[[49,63],-1,[]],[[49,68],-1,[]],[[47,43],-1,[]],[[47,69],-1,[]],[[47,67],-1,[]],[[47,64],-1,[]],[[47,65],-1,[]],[[47,63],-1,[]],[[47,53],-1,[]],[[47,66],-1,[]],[[47,68],-1,[]],[[47,15],-1,[]],[[48,67],-1,[]],[[48,15],-1,[]],[[48,63],-1,[]],[[48,44],-1,[]],[[48,54],-1,[]],[[48,66],-1,[]],[[48,68],-1,[]],[[48,64],-1,[]],[[48,69],-1,[]],[[48,65],-1,[]],[[49,64],-1,[]],[[49,55],-1,[]],[[49,66],-1,[]],[[49,45],-1,[]],[[49,69],-1,[]],[[49,15],-1,[]],[[49,65],-1,[]],[[49,67],-1,[]],[[49,68],-1,[]],[[49,63],-1,[]],[64,47],[64,48],[64,49],[[47,47],47],[[47,64],47],[[48,48],48],[[48,64],48],[[49,49],49],[[49,64],49],[[47,64],2],[[47,47],2],[[48,48],2],[[48,64],2],[[49,49],2],[[49,64],2],[-1,47,[[58,[],[[57,[47]]]]]],[-1,47,[[58,[],[[57,[47]]]]]],[-1,48,[[58,[],[[57,[48]]]]]],[-1,48,[[58,[],[[57,[48]]]]]],[-1,49,[[58,[],[[57,[49]]]]]],[-1,49,[[58,[],[[57,[49]]]]]],[47,[[46,[64]]]],[48,[[46,[64]]]],[49,[[46,[64]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[48,47],[49,48],[43,[[8,[47,-1]]],[]],[-1,[[8,[-2]]],[],[]],[53,[[8,[47,-1]]],[]],[40,[[8,[47,-1]]],[]],[50,[[8,[47,-1]]],[]],[37,[[8,[47,-1]]],[]],[-1,[[8,[-2]]],[],[]],[51,[[8,[48,-1]]],[]],[38,[[8,[48,-1]]],[]],[41,[[8,[48,-1]]],[]],[44,[[8,[48,-1]]],[]],[54,[[8,[48,-1]]],[]],[39,[[8,[49,-1]]],[]],[-1,[[8,[-2]]],[],[]],[45,[[8,[49,-1]]],[]],[55,[[8,[49,-1]]],[]],[42,[[8,[49,-1]]],[]],[52,[[8,[49,-1]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[[64,64],47],[[64,64,64],48],[[64,64,64,64],49],0,[[47,47],47],[[48,48],48],[[49,49],49],[[47,47],47],[[48,48],48],[[49,49],49],[[47,47],47],[[48,48],48],[[49,49],49],[[47,47],47],[[48,48],48],[[49,49],49],[[47,[56,[64]]],2],[[48,[56,[64]]],2],[[49,[56,[64]]],2],[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],0,0,0,[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[47,47],[48,47],[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[47,48],[48,48],[49,48],[49,49],[47,49],[48,49],[49,49],[47,49],[48,49],[49,49],[48,49],[49,49],[47,48],[48,48],[49,48],[49,49],[47,49],[48,49],[49,49],[47,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[47,47],[48,47],[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[47,48],[48,48],[49,48],[49,49],[47,49],[48,49],[49,49],[47,49],[48,49],[49,49],[48,49],[49,49],[47,48],[48,48],[49,48],[49,49],[47,49],[48,49],[49,49],[47,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,47],[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],0,0,0,[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[47,47],[48,47],[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[47,48],[48,48],[49,48],[49,49],[47,49],[48,49],[49,49],[47,49],[48,49],[49,49],[48,49],[49,49],[47,48],[48,48],[49,48],[49,49],[47,49],[48,49],[49,49],[47,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[47,47],[48,47],[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[47,48],[48,48],[49,48],[49,49],[47,49],[48,49],[49,49],[47,49],[48,49],[49,49],[48,49],[49,49],[47,48],[48,48],[49,48],[49,49],[47,49],[48,49],[49,49],[47,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,47],[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],0,0,[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[49,48],[49,49],[49,49],[49,49],[49,49],[48,47],[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,47],[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,47],[49,47],[49,48],[49,49],[49,49],[49,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],[48,48],[49,48],[49,49],[48,49],[49,49],[48,49],[49,49],[48,49],[49,49],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[53,15],53],[[53,53],53],[[54,15],54],[[54,54],54],[[55,15],55],[[55,55],55],[[53,15],2],[[53,53],2],[[54,54],2],[[54,15],2],[[55,15],2],[[55,55],2],[53,34],[54,35],[55,36],[53,37],[54,38],[55,39],[53,40],[54,41],[55,42],[53,43],[54,44],[55,45],[53,[[46,[15]]]],[54,[[46,[15]]]],[55,[[46,[15]]]],[53,[[46,[15]]]],[54,[[46,[15]]]],[55,[[46,[15]]]],[53,47],[54,48],[55,49],[53,50],[54,51],[55,52],[53,18],[54,19],[54,20],[55,21],[[53,53],-1,[]],[[53,15],-1,[]],[[54,15],-1,[]],[[54,54],-1,[]],[[55,15],-1,[]],[[55,55],-1,[]],[[53,53],-1,[]],[[53,15],-1,[]],[[54,54],-1,[]],[[54,15],-1,[]],[[55,55],-1,[]],[[55,15],-1,[]],[[53,53],-1,[]],[[53,15],-1,[]],[[54,54],-1,[]],[[54,15],-1,[]],[[55,55],-1,[]],[[55,15],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[53,53,53],53],[[54,54,54],54],[[55,55,55],55],[53,53],[54,54],[55,55],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[53,53],10],[[54,54],11],[[55,55],12],[[53,53],10],[[54,54],11],[[55,55],12],[[53,53],10],[[54,54],11],[[55,55],12],[[53,53],10],[[54,54],11],[[55,55],12],[[53,53],10],[[54,54],11],[[55,55],12],[[53,53],10],[[54,54],11],[[55,55],12],[[54,54],54],[[],53],[[],54],[[],55],[[53,53],53],[[53,15],53],[[54,54],54],[[54,15],54],[[55,15],55],[[55,55],55],[[53,53],2],[[53,15],2],[[54,15],2],[[54,54],2],[[55,15],2],[[55,55],2],[[53,53],15],[[54,54],15],[[55,55],15],[[53,53],53],[[54,54],54],[[55,55],55],[[53,53],3],[[54,54],3],[[55,55],3],[[53,15],54],[[54,15],55],[[53,4],5],[[53,4],5],[[54,4],5],[[54,4],5],[[55,4],5],[[55,4],5],[-1,-1,[]],[47,53],[[[46,[15]]],53],[[[2,[15,15]]],53],[[[46,[15]]],54],[[[2,[53,15]]],54],[[[2,[15,15,15]]],54],[48,54],[-1,-1,[]],[[[46,[15]]],55],[-1,-1,[]],[[[2,[54,15]]],55],[[[2,[15,54]]],55],[49,55],[[[2,[15,15,15,15]]],55],[[[2,[53,15,15]]],55],[[[2,[53,53]]],55],[[[46,[15]]],53],[[[46,[15]]],54],[[[46,[15]]],55],[[[56,[15]]],53],[[[56,[15]]],54],[[[56,[15]]],55],[[53,-1],2,6],[[54,-1],2,6],[[55,-1],2,6],[[53,16],-1,[]],[[54,16],-1,[]],[[55,16],-1,[]],[[53,16],-1,[]],[[54,16],-1,[]],[[55,16],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[53,15],[54,15],[55,15],[[53,53],53],[[54,54],54],[[55,55],55],[53,15],[54,15],[55,15],[[53,53],53],[[54,54],54],[[55,55],55],[53,15],[54,15],[55,15],[[53,53],53],[[53,15],53],[[54,15],54],[[54,54],54],[[55,15],55],[[55,55],55],[[53,15],2],[[53,53],2],[[54,15],2],[[54,54],2],[[55,15],2],[[55,55],2],[[15,15],53],[[15,15,15],54],[[15,15,15,15],55],[53,-1,[]],[54,-1,[]],[55,-1,[]],[-1,53,[[58,[],[[57,[53]]]]]],[-1,53,[[58,[],[[57,[53]]]]]],[-1,54,[[58,[],[[57,[54]]]]]],[-1,54,[[58,[],[[57,[54]]]]]],[-1,55,[[58,[],[[57,[55]]]]]],[-1,55,[[58,[],[[57,[55]]]]]],[[53,53],53],[[53,15],53],[[54,15],54],[[54,54],54],[[55,55],55],[[55,15],55],[[53,15],2],[[53,53],2],[[54,54],2],[[54,15],2],[[55,55],2],[[55,15],2],[[53,53],53],[[54,54],54],[[55,55],55],[[53,53],53],[[54,54],54],[[55,55],55],[[53,53],53],[[54,54],54],[[55,55],55],[[53,53],53],[[54,54],54],[[55,55],55],[[10,53,53],53],[[11,54,54],54],[[12,55,55],55],[[53,53],-1,[]],[[53,68],-1,[]],[[53,65],-1,[]],[[53,64],-1,[]],[[53,43],-1,[]],[[53,15],-1,[]],[[53,66],-1,[]],[[53,67],-1,[]],[[53,69],-1,[]],[[53,63],-1,[]],[[54,15],-1,[]],[[54,66],-1,[]],[[54,63],-1,[]],[[54,44],-1,[]],[[54,68],-1,[]],[[54,65],-1,[]],[[54,64],-1,[]],[[54,54],-1,[]],[[54,69],-1,[]],[[54,67],-1,[]],[[55,15],-1,[]],[[55,68],-1,[]],[[55,64],-1,[]],[[55,66],-1,[]],[[55,67],-1,[]],[[55,45],-1,[]],[[55,55],-1,[]],[[55,65],-1,[]],[[55,69],-1,[]],[[55,63],-1,[]],[[53,68],-1,[]],[[53,64],-1,[]],[[53,69],-1,[]],[[53,43],-1,[]],[[53,65],-1,[]],[[53,15],-1,[]],[[53,63],-1,[]],[[53,67],-1,[]],[[53,53],-1,[]],[[53,66],-1,[]],[[54,54],-1,[]],[[54,68],-1,[]],[[54,65],-1,[]],[[54,63],-1,[]],[[54,64],-1,[]],[[54,44],-1,[]],[[54,66],-1,[]],[[54,69],-1,[]],[[54,15],-1,[]],[[54,67],-1,[]],[[55,64],-1,[]],[[55,45],-1,[]],[[55,68],-1,[]],[[55,55],-1,[]],[[55,66],-1,[]],[[55,67],-1,[]],[[55,69],-1,[]],[[55,65],-1,[]],[[55,15],-1,[]],[[55,63],-1,[]],[15,53],[15,54],[15,55],[[53,53],53],[[53,15],53],[[54,15],54],[[54,54],54],[[55,15],55],[[55,55],55],[[53,53],2],[[53,15],2],[[54,15],2],[[54,54],2],[[55,55],2],[[55,15],2],[-1,53,[[58,[],[[57,[53]]]]]],[-1,53,[[58,[],[[57,[53]]]]]],[-1,54,[[58,[],[[57,[54]]]]]],[-1,54,[[58,[],[[57,[54]]]]]],[-1,55,[[58,[],[[57,[55]]]]]],[-1,55,[[58,[],[[57,[55]]]]]],[53,[[46,[15]]]],[54,[[46,[15]]]],[55,[[46,[15]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[54,53],[55,54],[50,[[8,[53,-1]]],[]],[43,[[8,[53,-1]]],[]],[-1,[[8,[-2]]],[],[]],[37,[[8,[53,-1]]],[]],[40,[[8,[53,-1]]],[]],[-1,[[8,[-2]]],[],[]],[44,[[8,[54,-1]]],[]],[41,[[8,[54,-1]]],[]],[38,[[8,[54,-1]]],[]],[51,[[8,[54,-1]]],[]],[45,[[8,[55,-1]]],[]],[52,[[8,[55,-1]]],[]],[39,[[8,[55,-1]]],[]],[-1,[[8,[-2]]],[],[]],[42,[[8,[55,-1]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[[15,15],53],[[15,15,15],54],[[15,15,15,15],55],0,[[53,53],53],[[54,54],54],[[55,55],55],[[53,53],53],[[54,54],54],[[55,55],55],[[53,53],53],[[54,54],54],[[55,55],55],[[53,53],53],[[54,54],54],[[55,55],55],[[53,[56,[15]]],2],[[54,[56,[15]]],2],[[55,[56,[15]]],2],[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],0,0,0,[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[53,53],[54,53],[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[53,54],[54,54],[55,54],[55,55],[53,55],[54,55],[55,55],[53,55],[54,55],[55,55],[54,55],[55,55],[53,54],[54,54],[55,54],[55,55],[53,55],[54,55],[55,55],[53,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[53,53],[54,53],[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[53,54],[54,54],[55,54],[55,55],[53,55],[54,55],[55,55],[53,55],[54,55],[55,55],[54,55],[55,55],[53,54],[54,54],[55,54],[55,55],[53,55],[54,55],[55,55],[53,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,53],[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],0,0,0,[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[53,53],[54,53],[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[53,54],[54,54],[55,54],[55,55],[53,55],[54,55],[55,55],[53,55],[54,55],[55,55],[54,55],[55,55],[53,54],[54,54],[55,54],[55,55],[53,55],[54,55],[55,55],[53,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[53,53],[54,53],[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[53,54],[54,54],[55,54],[55,55],[53,55],[54,55],[55,55],[53,55],[54,55],[55,55],[54,55],[55,55],[53,54],[54,54],[55,54],[55,55],[53,55],[54,55],[55,55],[53,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,53],[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],0,0,[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[55,54],[55,55],[55,55],[55,55],[55,55],[54,53],[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,53],[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,53],[55,53],[55,54],[55,55],[55,55],[55,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],[54,54],[55,54],[55,55],[54,55],[55,55],[54,55],[55,55],[54,55],[55,55],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[50,50],50],[[50,69],50],[[51,69],51],[[51,51],51],[[52,52],52],[[52,69],52],[[50,69],2],[[50,50],2],[[51,69],2],[[51,51],2],[[52,52],2],[[52,69],2],[50,34],[51,35],[52,36],[50,37],[51,38],[52,39],[50,40],[51,41],[52,42],[50,43],[51,44],[52,45],[50,[[46,[69]]]],[51,[[46,[69]]]],[52,[[46,[69]]]],[50,[[46,[69]]]],[51,[[46,[69]]]],[52,[[46,[69]]]],[50,47],[51,48],[52,49],[50,53],[51,54],[52,55],[50,18],[51,19],[51,20],[52,21],[[50,69],-1,[]],[[50,50],-1,[]],[[51,69],-1,[]],[[51,51],-1,[]],[[52,52],-1,[]],[[52,69],-1,[]],[[50,69],-1,[]],[[50,50],-1,[]],[[51,69],-1,[]],[[51,51],-1,[]],[[52,52],-1,[]],[[52,69],-1,[]],[[50,50],-1,[]],[[50,69],-1,[]],[[51,69],-1,[]],[[51,51],-1,[]],[[52,52],-1,[]],[[52,69],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[50,50,50],50],[[51,51,51],51],[[52,52,52],52],[50,50],[51,51],[52,52],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[50,50],10],[[51,51],11],[[52,52],12],[[50,50],10],[[51,51],11],[[52,52],12],[[50,50],10],[[51,51],11],[[52,52],12],[[50,50],10],[[51,51],11],[[52,52],12],[[50,50],10],[[51,51],11],[[52,52],12],[[50,50],10],[[51,51],11],[[52,52],12],[[51,51],51],[[],50],[[],51],[[],52],[[50,69],50],[[50,50],50],[[51,51],51],[[51,69],51],[[52,52],52],[[52,69],52],[[50,69],2],[[50,50],2],[[51,51],2],[[51,69],2],[[52,69],2],[[52,52],2],[[50,50],69],[[51,51],69],[[52,52],69],[[50,50],50],[[51,51],51],[[52,52],52],[[50,50],3],[[51,51],3],[[52,52],3],[[50,69],51],[[51,69],52],[[50,4],5],[[50,4],5],[[51,4],5],[[51,4],5],[[52,4],5],[[52,4],5],[[[46,[69]]],50],[47,50],[-1,-1,[]],[53,50],[[[2,[69,69]]],50],[[[2,[69,69,69]]],51],[[[2,[50,69]]],51],[-1,-1,[]],[[[46,[69]]],51],[54,51],[48,51],[[[46,[69]]],52],[49,52],[[[2,[69,69,69,69]]],52],[[[2,[69,51]]],52],[-1,-1,[]],[55,52],[[[2,[51,69]]],52],[[[2,[50,69,69]]],52],[[[2,[50,50]]],52],[[[46,[69]]],50],[[[46,[69]]],51],[[[46,[69]]],52],[[[56,[69]]],50],[[[56,[69]]],51],[[[56,[69]]],52],[[50,-1],2,6],[[51,-1],2,6],[[52,-1],2,6],[[50,16],-1,[]],[[51,16],-1,[]],[[52,16],-1,[]],[[50,16],-1,[]],[[51,16],-1,[]],[[52,16],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[50,69],[51,69],[52,69],[[50,50],50],[[51,51],51],[[52,52],52],[50,69],[51,69],[52,69],[[50,50],50],[[51,51],51],[[52,52],52],[50,69],[51,69],[52,69],[[50,50],50],[[50,69],50],[[51,51],51],[[51,69],51],[[52,69],52],[[52,52],52],[[50,69],2],[[50,50],2],[[51,69],2],[[51,51],2],[[52,52],2],[[52,69],2],[[69,69],50],[[69,69,69],51],[[69,69,69,69],52],[50,-1,[]],[51,-1,[]],[52,-1,[]],[-1,50,[[58,[],[[57,[50]]]]]],[-1,50,[[58,[],[[57,[50]]]]]],[-1,51,[[58,[],[[57,[51]]]]]],[-1,51,[[58,[],[[57,[51]]]]]],[-1,52,[[58,[],[[57,[52]]]]]],[-1,52,[[58,[],[[57,[52]]]]]],[[50,69],50],[[50,50],50],[[51,51],51],[[51,69],51],[[52,52],52],[[52,69],52],[[50,50],2],[[50,69],2],[[51,69],2],[[51,51],2],[[52,69],2],[[52,52],2],[[50,50],50],[[51,51],51],[[52,52],52],[[50,50],50],[[51,51],51],[[52,52],52],[[50,50],50],[[51,51],51],[[52,52],52],[[50,50],50],[[51,51],51],[[52,52],52],[[10,50,50],50],[[11,51,51],51],[[12,52,52],52],[[50,53],-1,[]],[[50,63],-1,[]],[[50,67],-1,[]],[[50,69],-1,[]],[[50,64],-1,[]],[[50,68],-1,[]],[[50,15],-1,[]],[[50,43],-1,[]],[[50,65],-1,[]],[[50,66],-1,[]],[[51,67],-1,[]],[[51,44],-1,[]],[[51,65],-1,[]],[[51,69],-1,[]],[[51,15],-1,[]],[[51,66],-1,[]],[[51,64],-1,[]],[[51,68],-1,[]],[[51,54],-1,[]],[[51,63],-1,[]],[[52,68],-1,[]],[[52,15],-1,[]],[[52,65],-1,[]],[[52,69],-1,[]],[[52,66],-1,[]],[[52,67],-1,[]],[[52,64],-1,[]],[[52,55],-1,[]],[[52,45],-1,[]],[[52,63],-1,[]],[[50,69],-1,[]],[[50,63],-1,[]],[[50,64],-1,[]],[[50,66],-1,[]],[[50,67],-1,[]],[[50,53],-1,[]],[[50,15],-1,[]],[[50,65],-1,[]],[[50,68],-1,[]],[[50,43],-1,[]],[[51,44],-1,[]],[[51,64],-1,[]],[[51,67],-1,[]],[[51,68],-1,[]],[[51,65],-1,[]],[[51,54],-1,[]],[[51,69],-1,[]],[[51,66],-1,[]],[[51,15],-1,[]],[[51,63],-1,[]],[[52,67],-1,[]],[[52,65],-1,[]],[[52,64],-1,[]],[[52,63],-1,[]],[[52,45],-1,[]],[[52,55],-1,[]],[[52,68],-1,[]],[[52,69],-1,[]],[[52,66],-1,[]],[[52,15],-1,[]],[69,50],[69,51],[69,52],[[50,69],50],[[50,50],50],[[51,51],51],[[51,69],51],[[52,69],52],[[52,52],52],[[50,50],2],[[50,69],2],[[51,51],2],[[51,69],2],[[52,69],2],[[52,52],2],[-1,50,[[58,[],[[57,[50]]]]]],[-1,50,[[58,[],[[57,[50]]]]]],[-1,51,[[58,[],[[57,[51]]]]]],[-1,51,[[58,[],[[57,[51]]]]]],[-1,52,[[58,[],[[57,[52]]]]]],[-1,52,[[58,[],[[57,[52]]]]]],[50,[[46,[69]]]],[51,[[46,[69]]]],[52,[[46,[69]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[51,50],[52,51],[37,[[8,[50,-1]]],[]],[40,[[8,[50,-1]]],[]],[43,[[8,[50,-1]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[38,[[8,[51,-1]]],[]],[41,[[8,[51,-1]]],[]],[44,[[8,[51,-1]]],[]],[45,[[8,[52,-1]]],[]],[-1,[[8,[-2]]],[],[]],[42,[[8,[52,-1]]],[]],[39,[[8,[52,-1]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[[69,69],50],[[69,69,69],51],[[69,69,69,69],52],0,[[50,50],50],[[51,51],51],[[52,52],52],[[50,50],50],[[51,51],51],[[52,52],52],[[50,50],50],[[51,51],51],[[52,52],52],[[50,50],50],[[51,51],51],[[52,52],52],[[50,[56,[69]]],2],[[51,[56,[69]]],2],[[52,[56,[69]]],2],[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],0,0,0,[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[50,50],[51,50],[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[50,51],[51,51],[52,51],[52,52],[50,52],[51,52],[52,52],[50,52],[51,52],[52,52],[51,52],[52,52],[50,51],[51,51],[52,51],[52,52],[50,52],[51,52],[52,52],[50,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[50,50],[51,50],[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[50,51],[51,51],[52,51],[52,52],[50,52],[51,52],[52,52],[50,52],[51,52],[52,52],[51,52],[52,52],[50,51],[51,51],[52,51],[52,52],[50,52],[51,52],[52,52],[50,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,50],[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],0,0,0,[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[50,50],[51,50],[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[50,51],[51,51],[52,51],[52,52],[50,52],[51,52],[52,52],[50,52],[51,52],[52,52],[51,52],[52,52],[50,51],[51,51],[52,51],[52,52],[50,52],[51,52],[52,52],[50,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[50,50],[51,50],[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[50,51],[51,51],[52,51],[52,52],[50,52],[51,52],[52,52],[50,52],[51,52],[52,52],[51,52],[52,52],[50,51],[51,51],[52,51],[52,52],[50,52],[51,52],[52,52],[50,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,50],[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],0,0,[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[52,51],[52,52],[52,52],[52,52],[52,52],[51,50],[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,50],[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,50],[52,50],[52,51],[52,52],[52,52],[52,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52],[51,51],[52,51],[52,52],[51,52],[52,52],[51,52],[52,52],[51,52],[52,52]],"c":[373,1990],"p":[[6,"EulerRot",0],[1,"tuple"],[1,"bool"],[5,"Formatter",9036],[8,"Result",9036],[10,"Hasher",9037],[10,"FloatExt",0],[6,"Result",9038],[5,"TypeId",9039],[5,"BVec2",38],[5,"BVec3",38],[5,"BVec4",38],[5,"BVec3A",38],[5,"BVec4A",38],[1,"u32"],[1,"usize"],[5,"String",9040],[5,"Vec2",219],[5,"Vec3",219],[5,"Vec3A",219],[5,"Vec4",219],[5,"Affine2",219],[1,"f32"],[5,"Affine3A",219],[5,"Mat3",219],[5,"Mat2",219],[5,"Mat3A",219],[5,"Mat4",219],[5,"Quat",219],[5,"DMat2",1879],[5,"DMat3",1879],[5,"DMat4",1879],[5,"DQuat",1879],[5,"DVec2",1879],[5,"DVec3",1879],[5,"DVec4",1879],[5,"I16Vec2",3197],[5,"I16Vec3",3197],[5,"I16Vec4",3197],[5,"I64Vec2",5015],[5,"I64Vec3",5015],[5,"I64Vec4",5015],[5,"IVec2",4106],[5,"IVec3",4106],[5,"IVec4",4106],[1,"array"],[5,"U16Vec2",6417],[5,"U16Vec3",6417],[5,"U16Vec4",6417],[5,"U64Vec2",8163],[5,"U64Vec3",8163],[5,"U64Vec4",8163],[5,"UVec2",7290],[5,"UVec3",7290],[5,"UVec4",7290],[1,"slice"],[17,"Item"],[10,"Iterator",9041],[6,"Option",9042],[5,"DAffine2",1879],[1,"f64"],[5,"DAffine3",1879],[1,"i16"],[1,"u16"],[1,"i32"],[1,"u8"],[1,"i64"],[1,"i8"],[1,"u64"],[17,"Vec2"],[17,"Vec3"],[10,"Vec4Swizzles",5924],[17,"Vec4"],[10,"Vec2Swizzles",5924],[10,"Vec3Swizzles",5924]],"b":[[128,"impl-Debug-for-BVec2"],[129,"impl-Display-for-BVec2"],[130,"impl-Debug-for-BVec3"],[131,"impl-Display-for-BVec3"],[132,"impl-Display-for-BVec4"],[133,"impl-Debug-for-BVec4"],[134,"impl-Debug-for-BVec3A"],[135,"impl-Display-for-BVec3A"],[136,"impl-Debug-for-BVec4A"],[137,"impl-Display-for-BVec4A"],[326,"impl-Add%3Cf32%3E-for-Vec2"],[327,"impl-Add-for-Vec2"],[328,"impl-Add%3Cf32%3E-for-Vec3"],[329,"impl-Add-for-Vec3"],[334,"impl-Add-for-Vec3A"],[335,"impl-Add%3Cf32%3E-for-Vec3A"],[336,"impl-Add-for-Vec4"],[337,"impl-Add%3Cf32%3E-for-Vec4"],[339,"impl-AddAssign-for-Vec2"],[340,"impl-AddAssign%3Cf32%3E-for-Vec2"],[341,"impl-AddAssign%3Cf32%3E-for-Vec3"],[342,"impl-AddAssign-for-Vec3"],[346,"impl-AddAssign-for-Vec3A"],[347,"impl-AddAssign%3Cf32%3E-for-Vec3A"],[348,"impl-AddAssign-for-Vec4"],[349,"impl-AddAssign%3Cf32%3E-for-Vec4"],[543,"impl-Div-for-Vec2"],[544,"impl-Div%3Cf32%3E-for-Vec2"],[545,"impl-Div%3Cf32%3E-for-Vec3"],[546,"impl-Div-for-Vec3"],[548,"impl-Div-for-Vec3A"],[549,"impl-Div%3Cf32%3E-for-Vec3A"],[550,"impl-Div-for-Vec4"],[551,"impl-Div%3Cf32%3E-for-Vec4"],[552,"impl-DivAssign%3Cf32%3E-for-Vec2"],[553,"impl-DivAssign-for-Vec2"],[554,"impl-DivAssign%3Cf32%3E-for-Vec3"],[555,"impl-DivAssign-for-Vec3"],[556,"impl-DivAssign-for-Vec3A"],[557,"impl-DivAssign%3Cf32%3E-for-Vec3A"],[558,"impl-DivAssign%3Cf32%3E-for-Vec4"],[559,"impl-DivAssign-for-Vec4"],[595,"impl-Display-for-Affine2"],[596,"impl-Debug-for-Affine2"],[597,"impl-Debug-for-Affine3A"],[598,"impl-Display-for-Affine3A"],[599,"impl-Display-for-Mat3"],[600,"impl-Debug-for-Mat3"],[601,"impl-Display-for-Vec2"],[602,"impl-Debug-for-Vec2"],[603,"impl-Display-for-Vec3"],[604,"impl-Debug-for-Vec3"],[605,"impl-Debug-for-Mat2"],[606,"impl-Display-for-Mat2"],[607,"impl-Debug-for-Mat3A"],[608,"impl-Display-for-Mat3A"],[609,"impl-Display-for-Mat4"],[610,"impl-Debug-for-Mat4"],[611,"impl-Debug-for-Quat"],[612,"impl-Display-for-Quat"],[613,"impl-Display-for-Vec3A"],[614,"impl-Debug-for-Vec3A"],[615,"impl-Display-for-Vec4"],[616,"impl-Debug-for-Vec4"],[623,"impl-From%3CAffine2%3E-for-Mat3"],[624,"impl-From%3CMat3A%3E-for-Mat3"],[627,"impl-From%3C%5Bf32;+2%5D%3E-for-Vec2"],[628,"impl-From%3C(f32,+f32)%3E-for-Vec2"],[629,"impl-From%3C(f32,+f32,+f32)%3E-for-Vec3"],[630,"impl-From%3C%5Bf32;+3%5D%3E-for-Vec3"],[631,"impl-From%3CVec3A%3E-for-Vec3"],[632,"impl-From%3C(Vec2,+f32)%3E-for-Vec3"],[636,"impl-From%3CMat3%3E-for-Mat3A"],[637,"impl-From%3CAffine2%3E-for-Mat3A"],[641,"impl-From%3CVec3%3E-for-Vec3A"],[642,"impl-From%3C%5Bf32;+3%5D%3E-for-Vec3A"],[644,"impl-From%3CVec4%3E-for-Vec3A"],[645,"impl-From%3C(Vec2,+f32)%3E-for-Vec3A"],[646,"impl-From%3C(f32,+f32,+f32)%3E-for-Vec3A"],[648,"impl-From%3C(f32,+Vec3A)%3E-for-Vec4"],[649,"impl-From%3C(Vec2,+f32,+f32)%3E-for-Vec4"],[650,"impl-From%3C(f32,+Vec3)%3E-for-Vec4"],[651,"impl-From%3C%5Bf32;+4%5D%3E-for-Vec4"],[652,"impl-From%3C(f32,+f32,+f32,+f32)%3E-for-Vec4"],[653,"impl-From%3C(Vec3,+f32)%3E-for-Vec4"],[654,"impl-From%3C(Vec3A,+f32)%3E-for-Vec4"],[655,"impl-From%3C(Vec2,+Vec2)%3E-for-Vec4"],[656,"impl-From%3CQuat%3E-for-Vec4"],[884,"impl-Mul-for-Affine2"],[885,"impl-Mul%3CMat3A%3E-for-Affine2"],[886,"impl-Mul%3CMat3%3E-for-Affine2"],[887,"impl-Mul-for-Affine3A"],[888,"impl-Mul%3CMat4%3E-for-Affine3A"],[889,"impl-Mul%3CVec3A%3E-for-Mat3"],[890,"impl-Mul-for-Mat3"],[891,"impl-Mul%3CVec3%3E-for-Mat3"],[892,"impl-Mul%3CAffine2%3E-for-Mat3"],[893,"impl-Mul%3Cf32%3E-for-Mat3"],[894,"impl-Mul%3Cf32%3E-for-Vec2"],[895,"impl-Mul-for-Vec2"],[896,"impl-Mul%3Cf32%3E-for-Vec3"],[897,"impl-Mul-for-Vec3"],[898,"impl-Mul-for-Mat2"],[899,"impl-Mul%3CVec2%3E-for-Mat2"],[900,"impl-Mul%3Cf32%3E-for-Mat2"],[901,"impl-Mul-for-Mat3A"],[902,"impl-Mul%3CAffine2%3E-for-Mat3A"],[903,"impl-Mul%3CVec3%3E-for-Mat3A"],[904,"impl-Mul%3CVec3A%3E-for-Mat3A"],[905,"impl-Mul%3Cf32%3E-for-Mat3A"],[906,"impl-Mul-for-Mat4"],[907,"impl-Mul%3CAffine3A%3E-for-Mat4"],[908,"impl-Mul%3CVec4%3E-for-Mat4"],[909,"impl-Mul%3Cf32%3E-for-Mat4"],[910,"impl-Mul%3Cf32%3E-for-Quat"],[911,"impl-Mul%3CVec3A%3E-for-Quat"],[912,"impl-Mul%3CVec3%3E-for-Quat"],[913,"impl-Mul-for-Quat"],[914,"impl-Mul-for-Vec3A"],[915,"impl-Mul%3Cf32%3E-for-Vec3A"],[916,"impl-Mul-for-Vec4"],[917,"impl-Mul%3Cf32%3E-for-Vec4"],[924,"impl-MulAssign-for-Mat3"],[925,"impl-MulAssign%3Cf32%3E-for-Mat3"],[926,"impl-MulAssign-for-Vec2"],[927,"impl-MulAssign%3Cf32%3E-for-Vec2"],[928,"impl-MulAssign-for-Vec3"],[929,"impl-MulAssign%3Cf32%3E-for-Vec3"],[930,"impl-MulAssign%3Cf32%3E-for-Mat2"],[931,"impl-MulAssign-for-Mat2"],[932,"impl-MulAssign-for-Mat3A"],[933,"impl-MulAssign%3Cf32%3E-for-Mat3A"],[934,"impl-MulAssign%3Cf32%3E-for-Mat4"],[935,"impl-MulAssign-for-Mat4"],[937,"impl-MulAssign%3Cf32%3E-for-Vec3A"],[938,"impl-MulAssign-for-Vec3A"],[939,"impl-MulAssign%3Cf32%3E-for-Vec4"],[940,"impl-MulAssign-for-Vec4"],[998,"impl-Product%3C%26Mat3%3E-for-Mat3"],[999,"impl-Product-for-Mat3"],[1000,"impl-Product%3C%26Vec2%3E-for-Vec2"],[1001,"impl-Product-for-Vec2"],[1002,"impl-Product%3C%26Vec3%3E-for-Vec3"],[1003,"impl-Product-for-Vec3"],[1004,"impl-Product%3C%26Mat2%3E-for-Mat2"],[1005,"impl-Product-for-Mat2"],[1006,"impl-Product-for-Mat3A"],[1007,"impl-Product%3C%26Mat3A%3E-for-Mat3A"],[1008,"impl-Product-for-Mat4"],[1009,"impl-Product%3C%26Mat4%3E-for-Mat4"],[1010,"impl-Product%3C%26Quat%3E-for-Quat"],[1011,"impl-Product-for-Quat"],[1012,"impl-Product%3C%26Vec3A%3E-for-Vec3A"],[1013,"impl-Product-for-Vec3A"],[1014,"impl-Product-for-Vec4"],[1015,"impl-Product%3C%26Vec4%3E-for-Vec4"],[1038,"impl-Rem%3Cf32%3E-for-Vec2"],[1039,"impl-Rem-for-Vec2"],[1040,"impl-Rem%3Cf32%3E-for-Vec3"],[1041,"impl-Rem-for-Vec3"],[1042,"impl-Rem-for-Vec3A"],[1043,"impl-Rem%3Cf32%3E-for-Vec3A"],[1044,"impl-Rem%3Cf32%3E-for-Vec4"],[1045,"impl-Rem-for-Vec4"],[1046,"impl-RemAssign%3Cf32%3E-for-Vec2"],[1047,"impl-RemAssign-for-Vec2"],[1048,"impl-RemAssign%3Cf32%3E-for-Vec3"],[1049,"impl-RemAssign-for-Vec3"],[1050,"impl-RemAssign-for-Vec3A"],[1051,"impl-RemAssign%3Cf32%3E-for-Vec3A"],[1052,"impl-RemAssign-for-Vec4"],[1053,"impl-RemAssign%3Cf32%3E-for-Vec4"],[1081,"impl-Sub%3Cf32%3E-for-Vec2"],[1082,"impl-Sub-for-Vec2"],[1083,"impl-Sub-for-Vec3"],[1084,"impl-Sub%3Cf32%3E-for-Vec3"],[1089,"impl-Sub-for-Vec3A"],[1090,"impl-Sub%3Cf32%3E-for-Vec3A"],[1091,"impl-Sub%3Cf32%3E-for-Vec4"],[1092,"impl-Sub-for-Vec4"],[1094,"impl-SubAssign%3Cf32%3E-for-Vec2"],[1095,"impl-SubAssign-for-Vec2"],[1096,"impl-SubAssign-for-Vec3"],[1097,"impl-SubAssign%3Cf32%3E-for-Vec3"],[1101,"impl-SubAssign-for-Vec3A"],[1102,"impl-SubAssign%3Cf32%3E-for-Vec3A"],[1103,"impl-SubAssign-for-Vec4"],[1104,"impl-SubAssign%3Cf32%3E-for-Vec4"],[1109,"impl-Sum%3C%26Mat3%3E-for-Mat3"],[1110,"impl-Sum-for-Mat3"],[1111,"impl-Sum%3C%26Vec2%3E-for-Vec2"],[1112,"impl-Sum-for-Vec2"],[1113,"impl-Sum%3C%26Vec3%3E-for-Vec3"],[1114,"impl-Sum-for-Vec3"],[1115,"impl-Sum%3C%26Mat2%3E-for-Mat2"],[1116,"impl-Sum-for-Mat2"],[1117,"impl-Sum-for-Mat3A"],[1118,"impl-Sum%3C%26Mat3A%3E-for-Mat3A"],[1119,"impl-Sum%3C%26Mat4%3E-for-Mat4"],[1120,"impl-Sum-for-Mat4"],[1121,"impl-Sum-for-Quat"],[1122,"impl-Sum%3C%26Quat%3E-for-Quat"],[1123,"impl-Sum-for-Vec3A"],[1124,"impl-Sum%3C%26Vec3A%3E-for-Vec3A"],[1125,"impl-Sum%3C%26Vec4%3E-for-Vec4"],[1126,"impl-Sum-for-Vec4"],[1966,"impl-Add-for-DVec2"],[1967,"impl-Add%3Cf64%3E-for-DVec2"],[1968,"impl-Add%3Cf64%3E-for-DVec3"],[1969,"impl-Add-for-DVec3"],[1970,"impl-Add-for-DVec4"],[1971,"impl-Add%3Cf64%3E-for-DVec4"],[1975,"impl-AddAssign%3Cf64%3E-for-DVec2"],[1976,"impl-AddAssign-for-DVec2"],[1977,"impl-AddAssign%3Cf64%3E-for-DVec3"],[1978,"impl-AddAssign-for-DVec3"],[1979,"impl-AddAssign-for-DVec4"],[1980,"impl-AddAssign%3Cf64%3E-for-DVec4"],[2133,"impl-Div%3Cf64%3E-for-DVec2"],[2134,"impl-Div-for-DVec2"],[2135,"impl-Div-for-DVec3"],[2136,"impl-Div%3Cf64%3E-for-DVec3"],[2137,"impl-Div-for-DVec4"],[2138,"impl-Div%3Cf64%3E-for-DVec4"],[2139,"impl-DivAssign%3Cf64%3E-for-DVec2"],[2140,"impl-DivAssign-for-DVec2"],[2141,"impl-DivAssign%3Cf64%3E-for-DVec3"],[2142,"impl-DivAssign-for-DVec3"],[2143,"impl-DivAssign%3Cf64%3E-for-DVec4"],[2144,"impl-DivAssign-for-DVec4"],[2179,"impl-Debug-for-DAffine2"],[2180,"impl-Display-for-DAffine2"],[2181,"impl-Display-for-DAffine3"],[2182,"impl-Debug-for-DAffine3"],[2183,"impl-Display-for-DMat2"],[2184,"impl-Debug-for-DMat2"],[2185,"impl-Display-for-DMat3"],[2186,"impl-Debug-for-DMat3"],[2187,"impl-Debug-for-DMat4"],[2188,"impl-Display-for-DMat4"],[2189,"impl-Debug-for-DQuat"],[2190,"impl-Display-for-DQuat"],[2191,"impl-Display-for-DVec2"],[2192,"impl-Debug-for-DVec2"],[2193,"impl-Debug-for-DVec3"],[2194,"impl-Display-for-DVec3"],[2195,"impl-Display-for-DVec4"],[2196,"impl-Debug-for-DVec4"],[2208,"impl-From%3CUVec2%3E-for-DVec2"],[2209,"impl-From%3CIVec2%3E-for-DVec2"],[2210,"impl-From%3CVec2%3E-for-DVec2"],[2212,"impl-From%3C(f64,+f64)%3E-for-DVec2"],[2213,"impl-From%3C%5Bf64;+2%5D%3E-for-DVec2"],[2214,"impl-From%3CVec3%3E-for-DVec3"],[2215,"impl-From%3C%5Bf64;+3%5D%3E-for-DVec3"],[2216,"impl-From%3C(DVec2,+f64)%3E-for-DVec3"],[2217,"impl-From%3C(f64,+f64,+f64)%3E-for-DVec3"],[2219,"impl-From%3CIVec3%3E-for-DVec3"],[2220,"impl-From%3CUVec3%3E-for-DVec3"],[2221,"impl-From%3C(f64,+f64,+f64,+f64)%3E-for-DVec4"],[2222,"impl-From%3C(f64,+DVec3)%3E-for-DVec4"],[2223,"impl-From%3CVec4%3E-for-DVec4"],[2225,"impl-From%3C(DVec2,+f64,+f64)%3E-for-DVec4"],[2226,"impl-From%3C%5Bf64;+4%5D%3E-for-DVec4"],[2227,"impl-From%3CIVec4%3E-for-DVec4"],[2228,"impl-From%3C(DVec2,+DVec2)%3E-for-DVec4"],[2229,"impl-From%3C(DVec3,+f64)%3E-for-DVec4"],[2230,"impl-From%3CDQuat%3E-for-DVec4"],[2231,"impl-From%3CUVec4%3E-for-DVec4"],[2412,"impl-Mul-for-DAffine2"],[2413,"impl-Mul%3CDMat3%3E-for-DAffine2"],[2414,"impl-Mul%3CDMat4%3E-for-DAffine3"],[2415,"impl-Mul-for-DAffine3"],[2416,"impl-Mul%3CDVec2%3E-for-DMat2"],[2417,"impl-Mul%3Cf64%3E-for-DMat2"],[2418,"impl-Mul-for-DMat2"],[2419,"impl-Mul%3Cf64%3E-for-DMat3"],[2420,"impl-Mul%3CDAffine2%3E-for-DMat3"],[2421,"impl-Mul%3CDVec3%3E-for-DMat3"],[2422,"impl-Mul-for-DMat3"],[2423,"impl-Mul-for-DMat4"],[2424,"impl-Mul%3CDVec4%3E-for-DMat4"],[2425,"impl-Mul%3Cf64%3E-for-DMat4"],[2426,"impl-Mul%3CDAffine3%3E-for-DMat4"],[2427,"impl-Mul-for-DQuat"],[2428,"impl-Mul%3Cf64%3E-for-DQuat"],[2429,"impl-Mul%3CDVec3%3E-for-DQuat"],[2430,"impl-Mul%3Cf64%3E-for-DVec2"],[2431,"impl-Mul-for-DVec2"],[2432,"impl-Mul%3Cf64%3E-for-DVec3"],[2433,"impl-Mul-for-DVec3"],[2434,"impl-Mul%3Cf64%3E-for-DVec4"],[2435,"impl-Mul-for-DVec4"],[2441,"impl-MulAssign%3Cf64%3E-for-DMat2"],[2442,"impl-MulAssign-for-DMat2"],[2443,"impl-MulAssign-for-DMat3"],[2444,"impl-MulAssign%3Cf64%3E-for-DMat3"],[2445,"impl-MulAssign-for-DMat4"],[2446,"impl-MulAssign%3Cf64%3E-for-DMat4"],[2448,"impl-MulAssign%3Cf64%3E-for-DVec2"],[2449,"impl-MulAssign-for-DVec2"],[2450,"impl-MulAssign-for-DVec3"],[2451,"impl-MulAssign%3Cf64%3E-for-DVec3"],[2452,"impl-MulAssign%3Cf64%3E-for-DVec4"],[2453,"impl-MulAssign-for-DVec4"],[2499,"impl-Product%3C%26DMat2%3E-for-DMat2"],[2500,"impl-Product-for-DMat2"],[2501,"impl-Product%3C%26DMat3%3E-for-DMat3"],[2502,"impl-Product-for-DMat3"],[2503,"impl-Product-for-DMat4"],[2504,"impl-Product%3C%26DMat4%3E-for-DMat4"],[2505,"impl-Product-for-DQuat"],[2506,"impl-Product%3C%26DQuat%3E-for-DQuat"],[2507,"impl-Product-for-DVec2"],[2508,"impl-Product%3C%26DVec2%3E-for-DVec2"],[2509,"impl-Product%3C%26DVec3%3E-for-DVec3"],[2510,"impl-Product-for-DVec3"],[2511,"impl-Product-for-DVec4"],[2512,"impl-Product%3C%26DVec4%3E-for-DVec4"],[2529,"impl-Rem-for-DVec2"],[2530,"impl-Rem%3Cf64%3E-for-DVec2"],[2531,"impl-Rem-for-DVec3"],[2532,"impl-Rem%3Cf64%3E-for-DVec3"],[2533,"impl-Rem-for-DVec4"],[2534,"impl-Rem%3Cf64%3E-for-DVec4"],[2535,"impl-RemAssign%3Cf64%3E-for-DVec2"],[2536,"impl-RemAssign-for-DVec2"],[2537,"impl-RemAssign%3Cf64%3E-for-DVec3"],[2538,"impl-RemAssign-for-DVec3"],[2539,"impl-RemAssign-for-DVec4"],[2540,"impl-RemAssign%3Cf64%3E-for-DVec4"],[2565,"impl-Sub%3Cf64%3E-for-DVec2"],[2566,"impl-Sub-for-DVec2"],[2567,"impl-Sub%3Cf64%3E-for-DVec3"],[2568,"impl-Sub-for-DVec3"],[2569,"impl-Sub%3Cf64%3E-for-DVec4"],[2570,"impl-Sub-for-DVec4"],[2574,"impl-SubAssign%3Cf64%3E-for-DVec2"],[2575,"impl-SubAssign-for-DVec2"],[2576,"impl-SubAssign-for-DVec3"],[2577,"impl-SubAssign%3Cf64%3E-for-DVec3"],[2578,"impl-SubAssign%3Cf64%3E-for-DVec4"],[2579,"impl-SubAssign-for-DVec4"],[2583,"impl-Sum-for-DMat2"],[2584,"impl-Sum%3C%26DMat2%3E-for-DMat2"],[2585,"impl-Sum%3C%26DMat3%3E-for-DMat3"],[2586,"impl-Sum-for-DMat3"],[2587,"impl-Sum%3C%26DMat4%3E-for-DMat4"],[2588,"impl-Sum-for-DMat4"],[2589,"impl-Sum%3C%26DQuat%3E-for-DQuat"],[2590,"impl-Sum-for-DQuat"],[2591,"impl-Sum-for-DVec2"],[2592,"impl-Sum%3C%26DVec2%3E-for-DVec2"],[2593,"impl-Sum-for-DVec3"],[2594,"impl-Sum%3C%26DVec3%3E-for-DVec3"],[2595,"impl-Sum%3C%26DVec4%3E-for-DVec4"],[2596,"impl-Sum-for-DVec4"],[3239,"impl-Add%3Ci16%3E-for-I16Vec2"],[3240,"impl-Add-for-I16Vec2"],[3241,"impl-Add-for-I16Vec3"],[3242,"impl-Add%3Ci16%3E-for-I16Vec3"],[3243,"impl-Add-for-I16Vec4"],[3244,"impl-Add%3Ci16%3E-for-I16Vec4"],[3245,"impl-AddAssign-for-I16Vec2"],[3246,"impl-AddAssign%3Ci16%3E-for-I16Vec2"],[3247,"impl-AddAssign-for-I16Vec3"],[3248,"impl-AddAssign%3Ci16%3E-for-I16Vec3"],[3249,"impl-AddAssign%3Ci16%3E-for-I16Vec4"],[3250,"impl-AddAssign-for-I16Vec4"],[3279,"impl-BitAnd-for-I16Vec2"],[3280,"impl-BitAnd%3Ci16%3E-for-I16Vec2"],[3281,"impl-BitAnd%3Ci16%3E-for-I16Vec3"],[3282,"impl-BitAnd-for-I16Vec3"],[3283,"impl-BitAnd-for-I16Vec4"],[3284,"impl-BitAnd%3Ci16%3E-for-I16Vec4"],[3285,"impl-BitOr-for-I16Vec2"],[3286,"impl-BitOr%3Ci16%3E-for-I16Vec2"],[3287,"impl-BitOr-for-I16Vec3"],[3288,"impl-BitOr%3Ci16%3E-for-I16Vec3"],[3289,"impl-BitOr%3Ci16%3E-for-I16Vec4"],[3290,"impl-BitOr-for-I16Vec4"],[3291,"impl-BitXor-for-I16Vec2"],[3292,"impl-BitXor%3Ci16%3E-for-I16Vec2"],[3293,"impl-BitXor%3Ci16%3E-for-I16Vec3"],[3294,"impl-BitXor-for-I16Vec3"],[3295,"impl-BitXor-for-I16Vec4"],[3296,"impl-BitXor%3Ci16%3E-for-I16Vec4"],[3337,"impl-Div-for-I16Vec2"],[3338,"impl-Div%3Ci16%3E-for-I16Vec2"],[3339,"impl-Div%3Ci16%3E-for-I16Vec3"],[3340,"impl-Div-for-I16Vec3"],[3341,"impl-Div-for-I16Vec4"],[3342,"impl-Div%3Ci16%3E-for-I16Vec4"],[3343,"impl-DivAssign-for-I16Vec2"],[3344,"impl-DivAssign%3Ci16%3E-for-I16Vec2"],[3345,"impl-DivAssign-for-I16Vec3"],[3346,"impl-DivAssign%3Ci16%3E-for-I16Vec3"],[3347,"impl-DivAssign%3Ci16%3E-for-I16Vec4"],[3348,"impl-DivAssign-for-I16Vec4"],[3363,"impl-Display-for-I16Vec2"],[3364,"impl-Debug-for-I16Vec2"],[3365,"impl-Display-for-I16Vec3"],[3366,"impl-Debug-for-I16Vec3"],[3367,"impl-Display-for-I16Vec4"],[3368,"impl-Debug-for-I16Vec4"],[3369,"impl-From%3C(i16,+i16)%3E-for-I16Vec2"],[3371,"impl-From%3C%5Bi16;+2%5D%3E-for-I16Vec2"],[3372,"impl-From%3C(i16,+i16,+i16)%3E-for-I16Vec3"],[3374,"impl-From%3C(I16Vec2,+i16)%3E-for-I16Vec3"],[3375,"impl-From%3C%5Bi16;+3%5D%3E-for-I16Vec3"],[3376,"impl-From%3C%5Bi16;+4%5D%3E-for-I16Vec4"],[3378,"impl-From%3C(I16Vec2,+i16,+i16)%3E-for-I16Vec4"],[3379,"impl-From%3C(I16Vec3,+i16)%3E-for-I16Vec4"],[3380,"impl-From%3C(I16Vec2,+I16Vec2)%3E-for-I16Vec4"],[3381,"impl-From%3C(i16,+i16,+i16,+i16)%3E-for-I16Vec4"],[3382,"impl-From%3C(i16,+I16Vec3)%3E-for-I16Vec4"],[3422,"impl-Mul-for-I16Vec2"],[3423,"impl-Mul%3Ci16%3E-for-I16Vec2"],[3424,"impl-Mul%3Ci16%3E-for-I16Vec3"],[3425,"impl-Mul-for-I16Vec3"],[3426,"impl-Mul%3Ci16%3E-for-I16Vec4"],[3427,"impl-Mul-for-I16Vec4"],[3428,"impl-MulAssign%3Ci16%3E-for-I16Vec2"],[3429,"impl-MulAssign-for-I16Vec2"],[3430,"impl-MulAssign-for-I16Vec3"],[3431,"impl-MulAssign%3Ci16%3E-for-I16Vec3"],[3432,"impl-MulAssign-for-I16Vec4"],[3433,"impl-MulAssign%3Ci16%3E-for-I16Vec4"],[3445,"impl-Product%3C%26I16Vec2%3E-for-I16Vec2"],[3446,"impl-Product-for-I16Vec2"],[3447,"impl-Product-for-I16Vec3"],[3448,"impl-Product%3C%26I16Vec3%3E-for-I16Vec3"],[3449,"impl-Product%3C%26I16Vec4%3E-for-I16Vec4"],[3450,"impl-Product-for-I16Vec4"],[3451,"impl-Rem-for-I16Vec2"],[3452,"impl-Rem%3Ci16%3E-for-I16Vec2"],[3453,"impl-Rem%3Ci16%3E-for-I16Vec3"],[3454,"impl-Rem-for-I16Vec3"],[3455,"impl-Rem%3Ci16%3E-for-I16Vec4"],[3456,"impl-Rem-for-I16Vec4"],[3457,"impl-RemAssign-for-I16Vec2"],[3458,"impl-RemAssign%3Ci16%3E-for-I16Vec2"],[3459,"impl-RemAssign-for-I16Vec3"],[3460,"impl-RemAssign%3Ci16%3E-for-I16Vec3"],[3461,"impl-RemAssign-for-I16Vec4"],[3462,"impl-RemAssign%3Ci16%3E-for-I16Vec4"],[3482,"impl-Shl%3Cu16%3E-for-I16Vec2"],[3483,"impl-Shl%3Ci32%3E-for-I16Vec2"],[3484,"impl-Shl%3Cu8%3E-for-I16Vec2"],[3485,"impl-Shl%3Ci16%3E-for-I16Vec2"],[3486,"impl-Shl%3Ci64%3E-for-I16Vec2"],[3487,"impl-Shl%3Cu32%3E-for-I16Vec2"],[3488,"impl-Shl%3CUVec2%3E-for-I16Vec2"],[3489,"impl-Shl%3Ci8%3E-for-I16Vec2"],[3490,"impl-Shl%3CIVec2%3E-for-I16Vec2"],[3491,"impl-Shl%3Cu64%3E-for-I16Vec2"],[3492,"impl-Shl%3Cu64%3E-for-I16Vec3"],[3493,"impl-Shl%3Ci16%3E-for-I16Vec3"],[3494,"impl-Shl%3Ci64%3E-for-I16Vec3"],[3495,"impl-Shl%3CIVec3%3E-for-I16Vec3"],[3496,"impl-Shl%3CUVec3%3E-for-I16Vec3"],[3497,"impl-Shl%3Cu16%3E-for-I16Vec3"],[3498,"impl-Shl%3Ci32%3E-for-I16Vec3"],[3499,"impl-Shl%3Cu8%3E-for-I16Vec3"],[3500,"impl-Shl%3Cu32%3E-for-I16Vec3"],[3501,"impl-Shl%3Ci8%3E-for-I16Vec3"],[3502,"impl-Shl%3Ci32%3E-for-I16Vec4"],[3503,"impl-Shl%3Ci8%3E-for-I16Vec4"],[3504,"impl-Shl%3Ci64%3E-for-I16Vec4"],[3505,"impl-Shl%3Cu32%3E-for-I16Vec4"],[3506,"impl-Shl%3Ci16%3E-for-I16Vec4"],[3507,"impl-Shl%3CUVec4%3E-for-I16Vec4"],[3508,"impl-Shl%3Cu16%3E-for-I16Vec4"],[3509,"impl-Shl%3Cu8%3E-for-I16Vec4"],[3510,"impl-Shl%3Cu64%3E-for-I16Vec4"],[3511,"impl-Shl%3CIVec4%3E-for-I16Vec4"],[3512,"impl-Shr%3Ci16%3E-for-I16Vec2"],[3513,"impl-Shr%3Ci8%3E-for-I16Vec2"],[3514,"impl-Shr%3CUVec2%3E-for-I16Vec2"],[3515,"impl-Shr%3Cu64%3E-for-I16Vec2"],[3516,"impl-Shr%3Cu32%3E-for-I16Vec2"],[3517,"impl-Shr%3CIVec2%3E-for-I16Vec2"],[3518,"impl-Shr%3Ci32%3E-for-I16Vec2"],[3519,"impl-Shr%3Cu8%3E-for-I16Vec2"],[3520,"impl-Shr%3Cu16%3E-for-I16Vec2"],[3521,"impl-Shr%3Ci64%3E-for-I16Vec2"],[3522,"impl-Shr%3Ci16%3E-for-I16Vec3"],[3523,"impl-Shr%3Ci64%3E-for-I16Vec3"],[3524,"impl-Shr%3Ci32%3E-for-I16Vec3"],[3525,"impl-Shr%3CIVec3%3E-for-I16Vec3"],[3526,"impl-Shr%3Cu64%3E-for-I16Vec3"],[3527,"impl-Shr%3Ci8%3E-for-I16Vec3"],[3528,"impl-Shr%3Cu32%3E-for-I16Vec3"],[3529,"impl-Shr%3Cu8%3E-for-I16Vec3"],[3530,"impl-Shr%3CUVec3%3E-for-I16Vec3"],[3531,"impl-Shr%3Cu16%3E-for-I16Vec3"],[3532,"impl-Shr%3Ci16%3E-for-I16Vec4"],[3533,"impl-Shr%3Cu64%3E-for-I16Vec4"],[3534,"impl-Shr%3Cu16%3E-for-I16Vec4"],[3535,"impl-Shr%3Cu32%3E-for-I16Vec4"],[3536,"impl-Shr%3CIVec4%3E-for-I16Vec4"],[3537,"impl-Shr%3Ci8%3E-for-I16Vec4"],[3538,"impl-Shr%3CUVec4%3E-for-I16Vec4"],[3539,"impl-Shr%3Ci64%3E-for-I16Vec4"],[3540,"impl-Shr%3Cu8%3E-for-I16Vec4"],[3541,"impl-Shr%3Ci32%3E-for-I16Vec4"],[3548,"impl-Sub%3Ci16%3E-for-I16Vec2"],[3549,"impl-Sub-for-I16Vec2"],[3550,"impl-Sub-for-I16Vec3"],[3551,"impl-Sub%3Ci16%3E-for-I16Vec3"],[3552,"impl-Sub%3Ci16%3E-for-I16Vec4"],[3553,"impl-Sub-for-I16Vec4"],[3554,"impl-SubAssign%3Ci16%3E-for-I16Vec2"],[3555,"impl-SubAssign-for-I16Vec2"],[3556,"impl-SubAssign%3Ci16%3E-for-I16Vec3"],[3557,"impl-SubAssign-for-I16Vec3"],[3558,"impl-SubAssign%3Ci16%3E-for-I16Vec4"],[3559,"impl-SubAssign-for-I16Vec4"],[3560,"impl-Sum%3C%26I16Vec2%3E-for-I16Vec2"],[3561,"impl-Sum-for-I16Vec2"],[3562,"impl-Sum%3C%26I16Vec3%3E-for-I16Vec3"],[3563,"impl-Sum-for-I16Vec3"],[3564,"impl-Sum-for-I16Vec4"],[3565,"impl-Sum%3C%26I16Vec4%3E-for-I16Vec4"],[3577,"impl-TryFrom%3CI64Vec2%3E-for-I16Vec2"],[3579,"impl-TryFrom%3CUVec2%3E-for-I16Vec2"],[3580,"impl-TryFrom%3CIVec2%3E-for-I16Vec2"],[3581,"impl-TryFrom%3CU16Vec2%3E-for-I16Vec2"],[3582,"impl-TryFrom%3CU64Vec2%3E-for-I16Vec2"],[3583,"impl-TryFrom%3CU64Vec3%3E-for-I16Vec3"],[3584,"impl-TryFrom%3CU16Vec3%3E-for-I16Vec3"],[3586,"impl-TryFrom%3CI64Vec3%3E-for-I16Vec3"],[3587,"impl-TryFrom%3CIVec3%3E-for-I16Vec3"],[3588,"impl-TryFrom%3CUVec3%3E-for-I16Vec3"],[3590,"impl-TryFrom%3CU16Vec4%3E-for-I16Vec4"],[3591,"impl-TryFrom%3CUVec4%3E-for-I16Vec4"],[3592,"impl-TryFrom%3CI64Vec4%3E-for-I16Vec4"],[3593,"impl-TryFrom%3CU64Vec4%3E-for-I16Vec4"],[3594,"impl-TryFrom%3CIVec4%3E-for-I16Vec4"],[4148,"impl-Add-for-IVec2"],[4149,"impl-Add%3Ci32%3E-for-IVec2"],[4150,"impl-Add%3Ci32%3E-for-IVec3"],[4151,"impl-Add-for-IVec3"],[4152,"impl-Add%3Ci32%3E-for-IVec4"],[4153,"impl-Add-for-IVec4"],[4154,"impl-AddAssign%3Ci32%3E-for-IVec2"],[4155,"impl-AddAssign-for-IVec2"],[4156,"impl-AddAssign%3Ci32%3E-for-IVec3"],[4157,"impl-AddAssign-for-IVec3"],[4158,"impl-AddAssign%3Ci32%3E-for-IVec4"],[4159,"impl-AddAssign-for-IVec4"],[4188,"impl-BitAnd-for-IVec2"],[4189,"impl-BitAnd%3Ci32%3E-for-IVec2"],[4190,"impl-BitAnd%3Ci32%3E-for-IVec3"],[4191,"impl-BitAnd-for-IVec3"],[4192,"impl-BitAnd-for-IVec4"],[4193,"impl-BitAnd%3Ci32%3E-for-IVec4"],[4194,"impl-BitOr%3Ci32%3E-for-IVec2"],[4195,"impl-BitOr-for-IVec2"],[4196,"impl-BitOr-for-IVec3"],[4197,"impl-BitOr%3Ci32%3E-for-IVec3"],[4198,"impl-BitOr-for-IVec4"],[4199,"impl-BitOr%3Ci32%3E-for-IVec4"],[4200,"impl-BitXor-for-IVec2"],[4201,"impl-BitXor%3Ci32%3E-for-IVec2"],[4202,"impl-BitXor-for-IVec3"],[4203,"impl-BitXor%3Ci32%3E-for-IVec3"],[4204,"impl-BitXor-for-IVec4"],[4205,"impl-BitXor%3Ci32%3E-for-IVec4"],[4246,"impl-Div-for-IVec2"],[4247,"impl-Div%3Ci32%3E-for-IVec2"],[4248,"impl-Div-for-IVec3"],[4249,"impl-Div%3Ci32%3E-for-IVec3"],[4250,"impl-Div%3Ci32%3E-for-IVec4"],[4251,"impl-Div-for-IVec4"],[4252,"impl-DivAssign-for-IVec2"],[4253,"impl-DivAssign%3Ci32%3E-for-IVec2"],[4254,"impl-DivAssign%3Ci32%3E-for-IVec3"],[4255,"impl-DivAssign-for-IVec3"],[4256,"impl-DivAssign-for-IVec4"],[4257,"impl-DivAssign%3Ci32%3E-for-IVec4"],[4272,"impl-Display-for-IVec2"],[4273,"impl-Debug-for-IVec2"],[4274,"impl-Debug-for-IVec3"],[4275,"impl-Display-for-IVec3"],[4276,"impl-Display-for-IVec4"],[4277,"impl-Debug-for-IVec4"],[4279,"impl-From%3CU16Vec2%3E-for-IVec2"],[4280,"impl-From%3C(i32,+i32)%3E-for-IVec2"],[4281,"impl-From%3CI16Vec2%3E-for-IVec2"],[4282,"impl-From%3C%5Bi32;+2%5D%3E-for-IVec2"],[4283,"impl-From%3C(IVec2,+i32)%3E-for-IVec3"],[4284,"impl-From%3C(i32,+i32,+i32)%3E-for-IVec3"],[4285,"impl-From%3CI16Vec3%3E-for-IVec3"],[4286,"impl-From%3C%5Bi32;+3%5D%3E-for-IVec3"],[4288,"impl-From%3CU16Vec3%3E-for-IVec3"],[4289,"impl-From%3C(IVec2,+IVec2)%3E-for-IVec4"],[4290,"impl-From%3C(IVec3,+i32)%3E-for-IVec4"],[4291,"impl-From%3CU16Vec4%3E-for-IVec4"],[4292,"impl-From%3C(i32,+IVec3)%3E-for-IVec4"],[4293,"impl-From%3C(IVec2,+i32,+i32)%3E-for-IVec4"],[4295,"impl-From%3C%5Bi32;+4%5D%3E-for-IVec4"],[4296,"impl-From%3C(i32,+i32,+i32,+i32)%3E-for-IVec4"],[4297,"impl-From%3CI16Vec4%3E-for-IVec4"],[4337,"impl-Mul-for-IVec2"],[4338,"impl-Mul%3Ci32%3E-for-IVec2"],[4339,"impl-Mul%3Ci32%3E-for-IVec3"],[4340,"impl-Mul-for-IVec3"],[4341,"impl-Mul%3Ci32%3E-for-IVec4"],[4342,"impl-Mul-for-IVec4"],[4343,"impl-MulAssign%3Ci32%3E-for-IVec2"],[4344,"impl-MulAssign-for-IVec2"],[4345,"impl-MulAssign%3Ci32%3E-for-IVec3"],[4346,"impl-MulAssign-for-IVec3"],[4347,"impl-MulAssign-for-IVec4"],[4348,"impl-MulAssign%3Ci32%3E-for-IVec4"],[4360,"impl-Product%3C%26IVec2%3E-for-IVec2"],[4361,"impl-Product-for-IVec2"],[4362,"impl-Product%3C%26IVec3%3E-for-IVec3"],[4363,"impl-Product-for-IVec3"],[4364,"impl-Product-for-IVec4"],[4365,"impl-Product%3C%26IVec4%3E-for-IVec4"],[4366,"impl-Rem%3Ci32%3E-for-IVec2"],[4367,"impl-Rem-for-IVec2"],[4368,"impl-Rem-for-IVec3"],[4369,"impl-Rem%3Ci32%3E-for-IVec3"],[4370,"impl-Rem%3Ci32%3E-for-IVec4"],[4371,"impl-Rem-for-IVec4"],[4372,"impl-RemAssign-for-IVec2"],[4373,"impl-RemAssign%3Ci32%3E-for-IVec2"],[4374,"impl-RemAssign%3Ci32%3E-for-IVec3"],[4375,"impl-RemAssign-for-IVec3"],[4376,"impl-RemAssign%3Ci32%3E-for-IVec4"],[4377,"impl-RemAssign-for-IVec4"],[4397,"impl-Shl%3Ci32%3E-for-IVec2"],[4398,"impl-Shl%3CUVec2%3E-for-IVec2"],[4399,"impl-Shl%3Ci8%3E-for-IVec2"],[4400,"impl-Shl%3Cu64%3E-for-IVec2"],[4401,"impl-Shl%3Cu32%3E-for-IVec2"],[4402,"impl-Shl%3Cu8%3E-for-IVec2"],[4403,"impl-Shl-for-IVec2"],[4404,"impl-Shl%3Ci16%3E-for-IVec2"],[4405,"impl-Shl%3Cu16%3E-for-IVec2"],[4406,"impl-Shl%3Ci64%3E-for-IVec2"],[4407,"impl-Shl%3Ci8%3E-for-IVec3"],[4408,"impl-Shl%3Ci32%3E-for-IVec3"],[4409,"impl-Shl%3CUVec3%3E-for-IVec3"],[4410,"impl-Shl%3Cu8%3E-for-IVec3"],[4411,"impl-Shl%3Cu64%3E-for-IVec3"],[4412,"impl-Shl%3Ci16%3E-for-IVec3"],[4413,"impl-Shl%3Ci64%3E-for-IVec3"],[4414,"impl-Shl%3Cu16%3E-for-IVec3"],[4415,"impl-Shl-for-IVec3"],[4416,"impl-Shl%3Cu32%3E-for-IVec3"],[4417,"impl-Shl%3Ci16%3E-for-IVec4"],[4418,"impl-Shl%3Ci32%3E-for-IVec4"],[4419,"impl-Shl%3Cu8%3E-for-IVec4"],[4420,"impl-Shl%3Cu32%3E-for-IVec4"],[4421,"impl-Shl%3Ci8%3E-for-IVec4"],[4422,"impl-Shl%3Ci64%3E-for-IVec4"],[4423,"impl-Shl%3CUVec4%3E-for-IVec4"],[4424,"impl-Shl%3Cu16%3E-for-IVec4"],[4425,"impl-Shl-for-IVec4"],[4426,"impl-Shl%3Cu64%3E-for-IVec4"],[4427,"impl-Shr-for-IVec2"],[4428,"impl-Shr%3CUVec2%3E-for-IVec2"],[4429,"impl-Shr%3Cu32%3E-for-IVec2"],[4430,"impl-Shr%3Ci64%3E-for-IVec2"],[4431,"impl-Shr%3Ci32%3E-for-IVec2"],[4432,"impl-Shr%3Cu16%3E-for-IVec2"],[4433,"impl-Shr%3Cu8%3E-for-IVec2"],[4434,"impl-Shr%3Ci16%3E-for-IVec2"],[4435,"impl-Shr%3Cu64%3E-for-IVec2"],[4436,"impl-Shr%3Ci8%3E-for-IVec2"],[4437,"impl-Shr%3Cu32%3E-for-IVec3"],[4438,"impl-Shr%3Ci64%3E-for-IVec3"],[4439,"impl-Shr%3CUVec3%3E-for-IVec3"],[4440,"impl-Shr%3Cu64%3E-for-IVec3"],[4441,"impl-Shr%3Cu8%3E-for-IVec3"],[4442,"impl-Shr%3Ci8%3E-for-IVec3"],[4443,"impl-Shr%3Ci32%3E-for-IVec3"],[4444,"impl-Shr%3Ci16%3E-for-IVec3"],[4445,"impl-Shr-for-IVec3"],[4446,"impl-Shr%3Cu16%3E-for-IVec3"],[4447,"impl-Shr%3Cu16%3E-for-IVec4"],[4448,"impl-Shr%3Cu32%3E-for-IVec4"],[4449,"impl-Shr%3Ci16%3E-for-IVec4"],[4450,"impl-Shr%3Cu64%3E-for-IVec4"],[4451,"impl-Shr%3Ci64%3E-for-IVec4"],[4452,"impl-Shr%3Ci8%3E-for-IVec4"],[4453,"impl-Shr-for-IVec4"],[4454,"impl-Shr%3CUVec4%3E-for-IVec4"],[4455,"impl-Shr%3Ci32%3E-for-IVec4"],[4456,"impl-Shr%3Cu8%3E-for-IVec4"],[4463,"impl-Sub%3Ci32%3E-for-IVec2"],[4464,"impl-Sub-for-IVec2"],[4465,"impl-Sub-for-IVec3"],[4466,"impl-Sub%3Ci32%3E-for-IVec3"],[4467,"impl-Sub%3Ci32%3E-for-IVec4"],[4468,"impl-Sub-for-IVec4"],[4469,"impl-SubAssign-for-IVec2"],[4470,"impl-SubAssign%3Ci32%3E-for-IVec2"],[4471,"impl-SubAssign%3Ci32%3E-for-IVec3"],[4472,"impl-SubAssign-for-IVec3"],[4473,"impl-SubAssign-for-IVec4"],[4474,"impl-SubAssign%3Ci32%3E-for-IVec4"],[4475,"impl-Sum-for-IVec2"],[4476,"impl-Sum%3C%26IVec2%3E-for-IVec2"],[4477,"impl-Sum-for-IVec3"],[4478,"impl-Sum%3C%26IVec3%3E-for-IVec3"],[4479,"impl-Sum-for-IVec4"],[4480,"impl-Sum%3C%26IVec4%3E-for-IVec4"],[4492,"impl-TryFrom%3CI64Vec2%3E-for-IVec2"],[4494,"impl-TryFrom%3CUVec2%3E-for-IVec2"],[4495,"impl-TryFrom%3CU64Vec2%3E-for-IVec2"],[4496,"impl-TryFrom%3CUVec3%3E-for-IVec3"],[4497,"impl-TryFrom%3CI64Vec3%3E-for-IVec3"],[4499,"impl-TryFrom%3CU64Vec3%3E-for-IVec3"],[4500,"impl-TryFrom%3CI64Vec4%3E-for-IVec4"],[4502,"impl-TryFrom%3CU64Vec4%3E-for-IVec4"],[4503,"impl-TryFrom%3CUVec4%3E-for-IVec4"],[5057,"impl-Add-for-I64Vec2"],[5058,"impl-Add%3Ci64%3E-for-I64Vec2"],[5059,"impl-Add%3Ci64%3E-for-I64Vec3"],[5060,"impl-Add-for-I64Vec3"],[5061,"impl-Add-for-I64Vec4"],[5062,"impl-Add%3Ci64%3E-for-I64Vec4"],[5063,"impl-AddAssign%3Ci64%3E-for-I64Vec2"],[5064,"impl-AddAssign-for-I64Vec2"],[5065,"impl-AddAssign%3Ci64%3E-for-I64Vec3"],[5066,"impl-AddAssign-for-I64Vec3"],[5067,"impl-AddAssign-for-I64Vec4"],[5068,"impl-AddAssign%3Ci64%3E-for-I64Vec4"],[5097,"impl-BitAnd%3Ci64%3E-for-I64Vec2"],[5098,"impl-BitAnd-for-I64Vec2"],[5099,"impl-BitAnd%3Ci64%3E-for-I64Vec3"],[5100,"impl-BitAnd-for-I64Vec3"],[5101,"impl-BitAnd%3Ci64%3E-for-I64Vec4"],[5102,"impl-BitAnd-for-I64Vec4"],[5103,"impl-BitOr%3Ci64%3E-for-I64Vec2"],[5104,"impl-BitOr-for-I64Vec2"],[5105,"impl-BitOr%3Ci64%3E-for-I64Vec3"],[5106,"impl-BitOr-for-I64Vec3"],[5107,"impl-BitOr%3Ci64%3E-for-I64Vec4"],[5108,"impl-BitOr-for-I64Vec4"],[5109,"impl-BitXor-for-I64Vec2"],[5110,"impl-BitXor%3Ci64%3E-for-I64Vec2"],[5111,"impl-BitXor-for-I64Vec3"],[5112,"impl-BitXor%3Ci64%3E-for-I64Vec3"],[5113,"impl-BitXor-for-I64Vec4"],[5114,"impl-BitXor%3Ci64%3E-for-I64Vec4"],[5155,"impl-Div-for-I64Vec2"],[5156,"impl-Div%3Ci64%3E-for-I64Vec2"],[5157,"impl-Div-for-I64Vec3"],[5158,"impl-Div%3Ci64%3E-for-I64Vec3"],[5159,"impl-Div%3Ci64%3E-for-I64Vec4"],[5160,"impl-Div-for-I64Vec4"],[5161,"impl-DivAssign%3Ci64%3E-for-I64Vec2"],[5162,"impl-DivAssign-for-I64Vec2"],[5163,"impl-DivAssign-for-I64Vec3"],[5164,"impl-DivAssign%3Ci64%3E-for-I64Vec3"],[5165,"impl-DivAssign-for-I64Vec4"],[5166,"impl-DivAssign%3Ci64%3E-for-I64Vec4"],[5181,"impl-Debug-for-I64Vec2"],[5182,"impl-Display-for-I64Vec2"],[5183,"impl-Display-for-I64Vec3"],[5184,"impl-Debug-for-I64Vec3"],[5185,"impl-Display-for-I64Vec4"],[5186,"impl-Debug-for-I64Vec4"],[5187,"impl-From%3C%5Bi64;+2%5D%3E-for-I64Vec2"],[5188,"impl-From%3CIVec2%3E-for-I64Vec2"],[5189,"impl-From%3CU16Vec2%3E-for-I64Vec2"],[5190,"impl-From%3CUVec2%3E-for-I64Vec2"],[5191,"impl-From%3C(i64,+i64)%3E-for-I64Vec2"],[5192,"impl-From%3CI16Vec2%3E-for-I64Vec2"],[5194,"impl-From%3CUVec3%3E-for-I64Vec3"],[5195,"impl-From%3C(i64,+i64,+i64)%3E-for-I64Vec3"],[5196,"impl-From%3C%5Bi64;+3%5D%3E-for-I64Vec3"],[5197,"impl-From%3CIVec3%3E-for-I64Vec3"],[5199,"impl-From%3C(I64Vec2,+i64)%3E-for-I64Vec3"],[5200,"impl-From%3CU16Vec3%3E-for-I64Vec3"],[5201,"impl-From%3CI16Vec3%3E-for-I64Vec3"],[5202,"impl-From%3C(i64,+i64,+i64,+i64)%3E-for-I64Vec4"],[5203,"impl-From%3C%5Bi64;+4%5D%3E-for-I64Vec4"],[5204,"impl-From%3C(I64Vec3,+i64)%3E-for-I64Vec4"],[5205,"impl-From%3C(i64,+I64Vec3)%3E-for-I64Vec4"],[5206,"impl-From%3C(I64Vec2,+I64Vec2)%3E-for-I64Vec4"],[5207,"impl-From%3CUVec4%3E-for-I64Vec4"],[5208,"impl-From%3CU16Vec4%3E-for-I64Vec4"],[5209,"impl-From%3CIVec4%3E-for-I64Vec4"],[5211,"impl-From%3CI16Vec4%3E-for-I64Vec4"],[5212,"impl-From%3C(I64Vec2,+i64,+i64)%3E-for-I64Vec4"],[5252,"impl-Mul-for-I64Vec2"],[5253,"impl-Mul%3Ci64%3E-for-I64Vec2"],[5254,"impl-Mul-for-I64Vec3"],[5255,"impl-Mul%3Ci64%3E-for-I64Vec3"],[5256,"impl-Mul-for-I64Vec4"],[5257,"impl-Mul%3Ci64%3E-for-I64Vec4"],[5258,"impl-MulAssign%3Ci64%3E-for-I64Vec2"],[5259,"impl-MulAssign-for-I64Vec2"],[5260,"impl-MulAssign%3Ci64%3E-for-I64Vec3"],[5261,"impl-MulAssign-for-I64Vec3"],[5262,"impl-MulAssign%3Ci64%3E-for-I64Vec4"],[5263,"impl-MulAssign-for-I64Vec4"],[5275,"impl-Product%3C%26I64Vec2%3E-for-I64Vec2"],[5276,"impl-Product-for-I64Vec2"],[5277,"impl-Product-for-I64Vec3"],[5278,"impl-Product%3C%26I64Vec3%3E-for-I64Vec3"],[5279,"impl-Product%3C%26I64Vec4%3E-for-I64Vec4"],[5280,"impl-Product-for-I64Vec4"],[5281,"impl-Rem%3Ci64%3E-for-I64Vec2"],[5282,"impl-Rem-for-I64Vec2"],[5283,"impl-Rem%3Ci64%3E-for-I64Vec3"],[5284,"impl-Rem-for-I64Vec3"],[5285,"impl-Rem-for-I64Vec4"],[5286,"impl-Rem%3Ci64%3E-for-I64Vec4"],[5287,"impl-RemAssign-for-I64Vec2"],[5288,"impl-RemAssign%3Ci64%3E-for-I64Vec2"],[5289,"impl-RemAssign%3Ci64%3E-for-I64Vec3"],[5290,"impl-RemAssign-for-I64Vec3"],[5291,"impl-RemAssign%3Ci64%3E-for-I64Vec4"],[5292,"impl-RemAssign-for-I64Vec4"],[5312,"impl-Shl%3Cu16%3E-for-I64Vec2"],[5313,"impl-Shl%3Cu64%3E-for-I64Vec2"],[5314,"impl-Shl%3Ci8%3E-for-I64Vec2"],[5315,"impl-Shl%3CUVec2%3E-for-I64Vec2"],[5316,"impl-Shl%3Cu32%3E-for-I64Vec2"],[5317,"impl-Shl%3Ci64%3E-for-I64Vec2"],[5318,"impl-Shl%3Ci32%3E-for-I64Vec2"],[5319,"impl-Shl%3CIVec2%3E-for-I64Vec2"],[5320,"impl-Shl%3Cu8%3E-for-I64Vec2"],[5321,"impl-Shl%3Ci16%3E-for-I64Vec2"],[5322,"impl-Shl%3CIVec3%3E-for-I64Vec3"],[5323,"impl-Shl%3Cu8%3E-for-I64Vec3"],[5324,"impl-Shl%3Ci8%3E-for-I64Vec3"],[5325,"impl-Shl%3Ci32%3E-for-I64Vec3"],[5326,"impl-Shl%3Cu32%3E-for-I64Vec3"],[5327,"impl-Shl%3Ci16%3E-for-I64Vec3"],[5328,"impl-Shl%3Cu16%3E-for-I64Vec3"],[5329,"impl-Shl%3Ci64%3E-for-I64Vec3"],[5330,"impl-Shl%3CUVec3%3E-for-I64Vec3"],[5331,"impl-Shl%3Cu64%3E-for-I64Vec3"],[5332,"impl-Shl%3CUVec4%3E-for-I64Vec4"],[5333,"impl-Shl%3Ci32%3E-for-I64Vec4"],[5334,"impl-Shl%3Cu8%3E-for-I64Vec4"],[5335,"impl-Shl%3Ci8%3E-for-I64Vec4"],[5336,"impl-Shl%3Cu32%3E-for-I64Vec4"],[5337,"impl-Shl%3Cu64%3E-for-I64Vec4"],[5338,"impl-Shl%3Ci64%3E-for-I64Vec4"],[5339,"impl-Shl%3Cu16%3E-for-I64Vec4"],[5340,"impl-Shl%3CIVec4%3E-for-I64Vec4"],[5341,"impl-Shl%3Ci16%3E-for-I64Vec4"],[5342,"impl-Shr%3Ci32%3E-for-I64Vec2"],[5343,"impl-Shr%3Cu16%3E-for-I64Vec2"],[5344,"impl-Shr%3CUVec2%3E-for-I64Vec2"],[5345,"impl-Shr%3Cu64%3E-for-I64Vec2"],[5346,"impl-Shr%3CIVec2%3E-for-I64Vec2"],[5347,"impl-Shr%3Ci64%3E-for-I64Vec2"],[5348,"impl-Shr%3Cu32%3E-for-I64Vec2"],[5349,"impl-Shr%3Ci16%3E-for-I64Vec2"],[5350,"impl-Shr%3Cu8%3E-for-I64Vec2"],[5351,"impl-Shr%3Ci8%3E-for-I64Vec2"],[5352,"impl-Shr%3Cu16%3E-for-I64Vec3"],[5353,"impl-Shr%3Cu8%3E-for-I64Vec3"],[5354,"impl-Shr%3Ci32%3E-for-I64Vec3"],[5355,"impl-Shr%3Cu64%3E-for-I64Vec3"],[5356,"impl-Shr%3Ci16%3E-for-I64Vec3"],[5357,"impl-Shr%3Cu32%3E-for-I64Vec3"],[5358,"impl-Shr%3CUVec3%3E-for-I64Vec3"],[5359,"impl-Shr%3Ci8%3E-for-I64Vec3"],[5360,"impl-Shr%3CIVec3%3E-for-I64Vec3"],[5361,"impl-Shr%3Ci64%3E-for-I64Vec3"],[5362,"impl-Shr%3Ci64%3E-for-I64Vec4"],[5363,"impl-Shr%3Cu8%3E-for-I64Vec4"],[5364,"impl-Shr%3CUVec4%3E-for-I64Vec4"],[5365,"impl-Shr%3CIVec4%3E-for-I64Vec4"],[5366,"impl-Shr%3Cu64%3E-for-I64Vec4"],[5367,"impl-Shr%3Cu16%3E-for-I64Vec4"],[5368,"impl-Shr%3Ci8%3E-for-I64Vec4"],[5369,"impl-Shr%3Ci16%3E-for-I64Vec4"],[5370,"impl-Shr%3Cu32%3E-for-I64Vec4"],[5371,"impl-Shr%3Ci32%3E-for-I64Vec4"],[5378,"impl-Sub%3Ci64%3E-for-I64Vec2"],[5379,"impl-Sub-for-I64Vec2"],[5380,"impl-Sub%3Ci64%3E-for-I64Vec3"],[5381,"impl-Sub-for-I64Vec3"],[5382,"impl-Sub%3Ci64%3E-for-I64Vec4"],[5383,"impl-Sub-for-I64Vec4"],[5384,"impl-SubAssign-for-I64Vec2"],[5385,"impl-SubAssign%3Ci64%3E-for-I64Vec2"],[5386,"impl-SubAssign-for-I64Vec3"],[5387,"impl-SubAssign%3Ci64%3E-for-I64Vec3"],[5388,"impl-SubAssign-for-I64Vec4"],[5389,"impl-SubAssign%3Ci64%3E-for-I64Vec4"],[5390,"impl-Sum%3C%26I64Vec2%3E-for-I64Vec2"],[5391,"impl-Sum-for-I64Vec2"],[5392,"impl-Sum%3C%26I64Vec3%3E-for-I64Vec3"],[5393,"impl-Sum-for-I64Vec3"],[5394,"impl-Sum-for-I64Vec4"],[5395,"impl-Sum%3C%26I64Vec4%3E-for-I64Vec4"],[6444,"impl-Add-for-U16Vec2"],[6445,"impl-Add%3Cu16%3E-for-U16Vec2"],[6446,"impl-Add-for-U16Vec3"],[6447,"impl-Add%3Cu16%3E-for-U16Vec3"],[6448,"impl-Add-for-U16Vec4"],[6449,"impl-Add%3Cu16%3E-for-U16Vec4"],[6450,"impl-AddAssign%3Cu16%3E-for-U16Vec2"],[6451,"impl-AddAssign-for-U16Vec2"],[6452,"impl-AddAssign%3Cu16%3E-for-U16Vec3"],[6453,"impl-AddAssign-for-U16Vec3"],[6454,"impl-AddAssign%3Cu16%3E-for-U16Vec4"],[6455,"impl-AddAssign-for-U16Vec4"],[6484,"impl-BitAnd%3Cu16%3E-for-U16Vec2"],[6485,"impl-BitAnd-for-U16Vec2"],[6486,"impl-BitAnd%3Cu16%3E-for-U16Vec3"],[6487,"impl-BitAnd-for-U16Vec3"],[6488,"impl-BitAnd-for-U16Vec4"],[6489,"impl-BitAnd%3Cu16%3E-for-U16Vec4"],[6490,"impl-BitOr-for-U16Vec2"],[6491,"impl-BitOr%3Cu16%3E-for-U16Vec2"],[6492,"impl-BitOr-for-U16Vec3"],[6493,"impl-BitOr%3Cu16%3E-for-U16Vec3"],[6494,"impl-BitOr-for-U16Vec4"],[6495,"impl-BitOr%3Cu16%3E-for-U16Vec4"],[6496,"impl-BitXor-for-U16Vec2"],[6497,"impl-BitXor%3Cu16%3E-for-U16Vec2"],[6498,"impl-BitXor%3Cu16%3E-for-U16Vec3"],[6499,"impl-BitXor-for-U16Vec3"],[6500,"impl-BitXor-for-U16Vec4"],[6501,"impl-BitXor%3Cu16%3E-for-U16Vec4"],[6539,"impl-Div-for-U16Vec2"],[6540,"impl-Div%3Cu16%3E-for-U16Vec2"],[6541,"impl-Div%3Cu16%3E-for-U16Vec3"],[6542,"impl-Div-for-U16Vec3"],[6543,"impl-Div%3Cu16%3E-for-U16Vec4"],[6544,"impl-Div-for-U16Vec4"],[6545,"impl-DivAssign-for-U16Vec2"],[6546,"impl-DivAssign%3Cu16%3E-for-U16Vec2"],[6547,"impl-DivAssign-for-U16Vec3"],[6548,"impl-DivAssign%3Cu16%3E-for-U16Vec3"],[6549,"impl-DivAssign%3Cu16%3E-for-U16Vec4"],[6550,"impl-DivAssign-for-U16Vec4"],[6562,"impl-Debug-for-U16Vec2"],[6563,"impl-Display-for-U16Vec2"],[6564,"impl-Display-for-U16Vec3"],[6565,"impl-Debug-for-U16Vec3"],[6566,"impl-Debug-for-U16Vec4"],[6567,"impl-Display-for-U16Vec4"],[6569,"impl-From%3C(u16,+u16)%3E-for-U16Vec2"],[6570,"impl-From%3C%5Bu16;+2%5D%3E-for-U16Vec2"],[6571,"impl-From%3C(u16,+u16,+u16)%3E-for-U16Vec3"],[6572,"impl-From%3C(U16Vec2,+u16)%3E-for-U16Vec3"],[6573,"impl-From%3C%5Bu16;+3%5D%3E-for-U16Vec3"],[6575,"impl-From%3C(u16,+u16,+u16,+u16)%3E-for-U16Vec4"],[6576,"impl-From%3C(u16,+U16Vec3)%3E-for-U16Vec4"],[6577,"impl-From%3C(U16Vec2,+U16Vec2)%3E-for-U16Vec4"],[6579,"impl-From%3C(U16Vec3,+u16)%3E-for-U16Vec4"],[6580,"impl-From%3C(U16Vec2,+u16,+u16)%3E-for-U16Vec4"],[6581,"impl-From%3C%5Bu16;+4%5D%3E-for-U16Vec4"],[6615,"impl-Mul-for-U16Vec2"],[6616,"impl-Mul%3Cu16%3E-for-U16Vec2"],[6617,"impl-Mul%3Cu16%3E-for-U16Vec3"],[6618,"impl-Mul-for-U16Vec3"],[6619,"impl-Mul%3Cu16%3E-for-U16Vec4"],[6620,"impl-Mul-for-U16Vec4"],[6621,"impl-MulAssign%3Cu16%3E-for-U16Vec2"],[6622,"impl-MulAssign-for-U16Vec2"],[6623,"impl-MulAssign-for-U16Vec3"],[6624,"impl-MulAssign%3Cu16%3E-for-U16Vec3"],[6625,"impl-MulAssign%3Cu16%3E-for-U16Vec4"],[6626,"impl-MulAssign-for-U16Vec4"],[6633,"impl-Product-for-U16Vec2"],[6634,"impl-Product%3C%26U16Vec2%3E-for-U16Vec2"],[6635,"impl-Product-for-U16Vec3"],[6636,"impl-Product%3C%26U16Vec3%3E-for-U16Vec3"],[6637,"impl-Product%3C%26U16Vec4%3E-for-U16Vec4"],[6638,"impl-Product-for-U16Vec4"],[6639,"impl-Rem%3Cu16%3E-for-U16Vec2"],[6640,"impl-Rem-for-U16Vec2"],[6641,"impl-Rem%3Cu16%3E-for-U16Vec3"],[6642,"impl-Rem-for-U16Vec3"],[6643,"impl-Rem%3Cu16%3E-for-U16Vec4"],[6644,"impl-Rem-for-U16Vec4"],[6645,"impl-RemAssign%3Cu16%3E-for-U16Vec2"],[6646,"impl-RemAssign-for-U16Vec2"],[6647,"impl-RemAssign-for-U16Vec3"],[6648,"impl-RemAssign%3Cu16%3E-for-U16Vec3"],[6649,"impl-RemAssign%3Cu16%3E-for-U16Vec4"],[6650,"impl-RemAssign-for-U16Vec4"],[6666,"impl-Shl%3Cu32%3E-for-U16Vec2"],[6667,"impl-Shl%3CUVec2%3E-for-U16Vec2"],[6668,"impl-Shl%3Cu16%3E-for-U16Vec2"],[6669,"impl-Shl%3Ci64%3E-for-U16Vec2"],[6670,"impl-Shl%3Ci32%3E-for-U16Vec2"],[6671,"impl-Shl%3Ci8%3E-for-U16Vec2"],[6672,"impl-Shl%3Ci16%3E-for-U16Vec2"],[6673,"impl-Shl%3Cu8%3E-for-U16Vec2"],[6674,"impl-Shl%3CIVec2%3E-for-U16Vec2"],[6675,"impl-Shl%3Cu64%3E-for-U16Vec2"],[6676,"impl-Shl%3Ci32%3E-for-U16Vec3"],[6677,"impl-Shl%3Cu16%3E-for-U16Vec3"],[6678,"impl-Shl%3CIVec3%3E-for-U16Vec3"],[6679,"impl-Shl%3Ci8%3E-for-U16Vec3"],[6680,"impl-Shl%3Cu8%3E-for-U16Vec3"],[6681,"impl-Shl%3CUVec3%3E-for-U16Vec3"],[6682,"impl-Shl%3Ci16%3E-for-U16Vec3"],[6683,"impl-Shl%3Cu32%3E-for-U16Vec3"],[6684,"impl-Shl%3Cu64%3E-for-U16Vec3"],[6685,"impl-Shl%3Ci64%3E-for-U16Vec3"],[6686,"impl-Shl%3Ci64%3E-for-U16Vec4"],[6687,"impl-Shl%3Cu32%3E-for-U16Vec4"],[6688,"impl-Shl%3Cu8%3E-for-U16Vec4"],[6689,"impl-Shl%3Cu16%3E-for-U16Vec4"],[6690,"impl-Shl%3CUVec4%3E-for-U16Vec4"],[6691,"impl-Shl%3Ci32%3E-for-U16Vec4"],[6692,"impl-Shl%3Cu64%3E-for-U16Vec4"],[6693,"impl-Shl%3CIVec4%3E-for-U16Vec4"],[6694,"impl-Shl%3Ci16%3E-for-U16Vec4"],[6695,"impl-Shl%3Ci8%3E-for-U16Vec4"],[6696,"impl-Shr%3CIVec2%3E-for-U16Vec2"],[6697,"impl-Shr%3Cu64%3E-for-U16Vec2"],[6698,"impl-Shr%3Ci64%3E-for-U16Vec2"],[6699,"impl-Shr%3Cu16%3E-for-U16Vec2"],[6700,"impl-Shr%3Ci32%3E-for-U16Vec2"],[6701,"impl-Shr%3Ci16%3E-for-U16Vec2"],[6702,"impl-Shr%3CUVec2%3E-for-U16Vec2"],[6703,"impl-Shr%3Cu8%3E-for-U16Vec2"],[6704,"impl-Shr%3Ci8%3E-for-U16Vec2"],[6705,"impl-Shr%3Cu32%3E-for-U16Vec2"],[6706,"impl-Shr%3Ci64%3E-for-U16Vec3"],[6707,"impl-Shr%3Cu32%3E-for-U16Vec3"],[6708,"impl-Shr%3Ci16%3E-for-U16Vec3"],[6709,"impl-Shr%3CIVec3%3E-for-U16Vec3"],[6710,"impl-Shr%3CUVec3%3E-for-U16Vec3"],[6711,"impl-Shr%3Cu8%3E-for-U16Vec3"],[6712,"impl-Shr%3Ci8%3E-for-U16Vec3"],[6713,"impl-Shr%3Cu16%3E-for-U16Vec3"],[6714,"impl-Shr%3Cu64%3E-for-U16Vec3"],[6715,"impl-Shr%3Ci32%3E-for-U16Vec3"],[6716,"impl-Shr%3Cu16%3E-for-U16Vec4"],[6717,"impl-Shr%3CUVec4%3E-for-U16Vec4"],[6718,"impl-Shr%3Cu8%3E-for-U16Vec4"],[6719,"impl-Shr%3CIVec4%3E-for-U16Vec4"],[6720,"impl-Shr%3Cu64%3E-for-U16Vec4"],[6721,"impl-Shr%3Cu32%3E-for-U16Vec4"],[6722,"impl-Shr%3Ci32%3E-for-U16Vec4"],[6723,"impl-Shr%3Ci64%3E-for-U16Vec4"],[6724,"impl-Shr%3Ci8%3E-for-U16Vec4"],[6725,"impl-Shr%3Ci16%3E-for-U16Vec4"],[6729,"impl-Sub-for-U16Vec2"],[6730,"impl-Sub%3Cu16%3E-for-U16Vec2"],[6731,"impl-Sub-for-U16Vec3"],[6732,"impl-Sub%3Cu16%3E-for-U16Vec3"],[6733,"impl-Sub-for-U16Vec4"],[6734,"impl-Sub%3Cu16%3E-for-U16Vec4"],[6735,"impl-SubAssign%3Cu16%3E-for-U16Vec2"],[6736,"impl-SubAssign-for-U16Vec2"],[6737,"impl-SubAssign-for-U16Vec3"],[6738,"impl-SubAssign%3Cu16%3E-for-U16Vec3"],[6739,"impl-SubAssign-for-U16Vec4"],[6740,"impl-SubAssign%3Cu16%3E-for-U16Vec4"],[6741,"impl-Sum-for-U16Vec2"],[6742,"impl-Sum%3C%26U16Vec2%3E-for-U16Vec2"],[6743,"impl-Sum-for-U16Vec3"],[6744,"impl-Sum%3C%26U16Vec3%3E-for-U16Vec3"],[6745,"impl-Sum%3C%26U16Vec4%3E-for-U16Vec4"],[6746,"impl-Sum-for-U16Vec4"],[6758,"impl-TryFrom%3CIVec2%3E-for-U16Vec2"],[6760,"impl-TryFrom%3CUVec2%3E-for-U16Vec2"],[6761,"impl-TryFrom%3CI64Vec2%3E-for-U16Vec2"],[6762,"impl-TryFrom%3CU64Vec2%3E-for-U16Vec2"],[6763,"impl-TryFrom%3CI16Vec2%3E-for-U16Vec2"],[6765,"impl-TryFrom%3CU64Vec3%3E-for-U16Vec3"],[6766,"impl-TryFrom%3CI16Vec3%3E-for-U16Vec3"],[6767,"impl-TryFrom%3CI64Vec3%3E-for-U16Vec3"],[6768,"impl-TryFrom%3CIVec3%3E-for-U16Vec3"],[6769,"impl-TryFrom%3CUVec3%3E-for-U16Vec3"],[6770,"impl-TryFrom%3CI16Vec4%3E-for-U16Vec4"],[6772,"impl-TryFrom%3CIVec4%3E-for-U16Vec4"],[6773,"impl-TryFrom%3CUVec4%3E-for-U16Vec4"],[6774,"impl-TryFrom%3CI64Vec4%3E-for-U16Vec4"],[6775,"impl-TryFrom%3CU64Vec4%3E-for-U16Vec4"],[7317,"impl-Add%3Cu32%3E-for-UVec2"],[7318,"impl-Add-for-UVec2"],[7319,"impl-Add%3Cu32%3E-for-UVec3"],[7320,"impl-Add-for-UVec3"],[7321,"impl-Add%3Cu32%3E-for-UVec4"],[7322,"impl-Add-for-UVec4"],[7323,"impl-AddAssign%3Cu32%3E-for-UVec2"],[7324,"impl-AddAssign-for-UVec2"],[7325,"impl-AddAssign-for-UVec3"],[7326,"impl-AddAssign%3Cu32%3E-for-UVec3"],[7327,"impl-AddAssign%3Cu32%3E-for-UVec4"],[7328,"impl-AddAssign-for-UVec4"],[7357,"impl-BitAnd-for-UVec2"],[7358,"impl-BitAnd%3Cu32%3E-for-UVec2"],[7359,"impl-BitAnd%3Cu32%3E-for-UVec3"],[7360,"impl-BitAnd-for-UVec3"],[7361,"impl-BitAnd%3Cu32%3E-for-UVec4"],[7362,"impl-BitAnd-for-UVec4"],[7363,"impl-BitOr-for-UVec2"],[7364,"impl-BitOr%3Cu32%3E-for-UVec2"],[7365,"impl-BitOr-for-UVec3"],[7366,"impl-BitOr%3Cu32%3E-for-UVec3"],[7367,"impl-BitOr-for-UVec4"],[7368,"impl-BitOr%3Cu32%3E-for-UVec4"],[7369,"impl-BitXor-for-UVec2"],[7370,"impl-BitXor%3Cu32%3E-for-UVec2"],[7371,"impl-BitXor-for-UVec3"],[7372,"impl-BitXor%3Cu32%3E-for-UVec3"],[7373,"impl-BitXor-for-UVec4"],[7374,"impl-BitXor%3Cu32%3E-for-UVec4"],[7412,"impl-Div-for-UVec2"],[7413,"impl-Div%3Cu32%3E-for-UVec2"],[7414,"impl-Div-for-UVec3"],[7415,"impl-Div%3Cu32%3E-for-UVec3"],[7416,"impl-Div%3Cu32%3E-for-UVec4"],[7417,"impl-Div-for-UVec4"],[7418,"impl-DivAssign-for-UVec2"],[7419,"impl-DivAssign%3Cu32%3E-for-UVec2"],[7420,"impl-DivAssign%3Cu32%3E-for-UVec3"],[7421,"impl-DivAssign-for-UVec3"],[7422,"impl-DivAssign%3Cu32%3E-for-UVec4"],[7423,"impl-DivAssign-for-UVec4"],[7435,"impl-Debug-for-UVec2"],[7436,"impl-Display-for-UVec2"],[7437,"impl-Display-for-UVec3"],[7438,"impl-Debug-for-UVec3"],[7439,"impl-Display-for-UVec4"],[7440,"impl-Debug-for-UVec4"],[7442,"impl-From%3CU16Vec2%3E-for-UVec2"],[7443,"impl-From%3C%5Bu32;+2%5D%3E-for-UVec2"],[7444,"impl-From%3C(u32,+u32)%3E-for-UVec2"],[7445,"impl-From%3C%5Bu32;+3%5D%3E-for-UVec3"],[7446,"impl-From%3C(UVec2,+u32)%3E-for-UVec3"],[7447,"impl-From%3C(u32,+u32,+u32)%3E-for-UVec3"],[7448,"impl-From%3CU16Vec3%3E-for-UVec3"],[7450,"impl-From%3C%5Bu32;+4%5D%3E-for-UVec4"],[7452,"impl-From%3C(UVec3,+u32)%3E-for-UVec4"],[7453,"impl-From%3C(u32,+UVec3)%3E-for-UVec4"],[7454,"impl-From%3CU16Vec4%3E-for-UVec4"],[7455,"impl-From%3C(u32,+u32,+u32,+u32)%3E-for-UVec4"],[7456,"impl-From%3C(UVec2,+u32,+u32)%3E-for-UVec4"],[7457,"impl-From%3C(UVec2,+UVec2)%3E-for-UVec4"],[7491,"impl-Mul-for-UVec2"],[7492,"impl-Mul%3Cu32%3E-for-UVec2"],[7493,"impl-Mul%3Cu32%3E-for-UVec3"],[7494,"impl-Mul-for-UVec3"],[7495,"impl-Mul%3Cu32%3E-for-UVec4"],[7496,"impl-Mul-for-UVec4"],[7497,"impl-MulAssign%3Cu32%3E-for-UVec2"],[7498,"impl-MulAssign-for-UVec2"],[7499,"impl-MulAssign%3Cu32%3E-for-UVec3"],[7500,"impl-MulAssign-for-UVec3"],[7501,"impl-MulAssign%3Cu32%3E-for-UVec4"],[7502,"impl-MulAssign-for-UVec4"],[7509,"impl-Product-for-UVec2"],[7510,"impl-Product%3C%26UVec2%3E-for-UVec2"],[7511,"impl-Product-for-UVec3"],[7512,"impl-Product%3C%26UVec3%3E-for-UVec3"],[7513,"impl-Product-for-UVec4"],[7514,"impl-Product%3C%26UVec4%3E-for-UVec4"],[7515,"impl-Rem-for-UVec2"],[7516,"impl-Rem%3Cu32%3E-for-UVec2"],[7517,"impl-Rem%3Cu32%3E-for-UVec3"],[7518,"impl-Rem-for-UVec3"],[7519,"impl-Rem-for-UVec4"],[7520,"impl-Rem%3Cu32%3E-for-UVec4"],[7521,"impl-RemAssign%3Cu32%3E-for-UVec2"],[7522,"impl-RemAssign-for-UVec2"],[7523,"impl-RemAssign-for-UVec3"],[7524,"impl-RemAssign%3Cu32%3E-for-UVec3"],[7525,"impl-RemAssign-for-UVec4"],[7526,"impl-RemAssign%3Cu32%3E-for-UVec4"],[7542,"impl-Shl-for-UVec2"],[7543,"impl-Shl%3Ci8%3E-for-UVec2"],[7544,"impl-Shl%3Ci32%3E-for-UVec2"],[7545,"impl-Shl%3Cu16%3E-for-UVec2"],[7546,"impl-Shl%3CIVec2%3E-for-UVec2"],[7547,"impl-Shl%3Cu32%3E-for-UVec2"],[7548,"impl-Shl%3Cu8%3E-for-UVec2"],[7549,"impl-Shl%3Ci64%3E-for-UVec2"],[7550,"impl-Shl%3Cu64%3E-for-UVec2"],[7551,"impl-Shl%3Ci16%3E-for-UVec2"],[7552,"impl-Shl%3Cu32%3E-for-UVec3"],[7553,"impl-Shl%3Cu8%3E-for-UVec3"],[7554,"impl-Shl%3Ci16%3E-for-UVec3"],[7555,"impl-Shl%3CIVec3%3E-for-UVec3"],[7556,"impl-Shl%3Ci8%3E-for-UVec3"],[7557,"impl-Shl%3Ci32%3E-for-UVec3"],[7558,"impl-Shl%3Cu16%3E-for-UVec3"],[7559,"impl-Shl-for-UVec3"],[7560,"impl-Shl%3Cu64%3E-for-UVec3"],[7561,"impl-Shl%3Ci64%3E-for-UVec3"],[7562,"impl-Shl%3Cu32%3E-for-UVec4"],[7563,"impl-Shl%3Ci8%3E-for-UVec4"],[7564,"impl-Shl%3Cu16%3E-for-UVec4"],[7565,"impl-Shl%3Cu8%3E-for-UVec4"],[7566,"impl-Shl%3Ci64%3E-for-UVec4"],[7567,"impl-Shl%3CIVec4%3E-for-UVec4"],[7568,"impl-Shl-for-UVec4"],[7569,"impl-Shl%3Ci32%3E-for-UVec4"],[7570,"impl-Shl%3Cu64%3E-for-UVec4"],[7571,"impl-Shl%3Ci16%3E-for-UVec4"],[7572,"impl-Shr%3Ci8%3E-for-UVec2"],[7573,"impl-Shr%3Cu16%3E-for-UVec2"],[7574,"impl-Shr%3Cu64%3E-for-UVec2"],[7575,"impl-Shr%3CIVec2%3E-for-UVec2"],[7576,"impl-Shr%3Ci32%3E-for-UVec2"],[7577,"impl-Shr%3Cu32%3E-for-UVec2"],[7578,"impl-Shr%3Ci16%3E-for-UVec2"],[7579,"impl-Shr%3Ci64%3E-for-UVec2"],[7580,"impl-Shr-for-UVec2"],[7581,"impl-Shr%3Cu8%3E-for-UVec2"],[7582,"impl-Shr-for-UVec3"],[7583,"impl-Shr%3Ci8%3E-for-UVec3"],[7584,"impl-Shr%3Ci32%3E-for-UVec3"],[7585,"impl-Shr%3Ci16%3E-for-UVec3"],[7586,"impl-Shr%3Cu16%3E-for-UVec3"],[7587,"impl-Shr%3CIVec3%3E-for-UVec3"],[7588,"impl-Shr%3Cu8%3E-for-UVec3"],[7589,"impl-Shr%3Cu64%3E-for-UVec3"],[7590,"impl-Shr%3Cu32%3E-for-UVec3"],[7591,"impl-Shr%3Ci64%3E-for-UVec3"],[7592,"impl-Shr%3Cu16%3E-for-UVec4"],[7593,"impl-Shr%3CIVec4%3E-for-UVec4"],[7594,"impl-Shr%3Ci8%3E-for-UVec4"],[7595,"impl-Shr-for-UVec4"],[7596,"impl-Shr%3Cu8%3E-for-UVec4"],[7597,"impl-Shr%3Ci64%3E-for-UVec4"],[7598,"impl-Shr%3Cu64%3E-for-UVec4"],[7599,"impl-Shr%3Ci32%3E-for-UVec4"],[7600,"impl-Shr%3Cu32%3E-for-UVec4"],[7601,"impl-Shr%3Ci16%3E-for-UVec4"],[7605,"impl-Sub-for-UVec2"],[7606,"impl-Sub%3Cu32%3E-for-UVec2"],[7607,"impl-Sub%3Cu32%3E-for-UVec3"],[7608,"impl-Sub-for-UVec3"],[7609,"impl-Sub%3Cu32%3E-for-UVec4"],[7610,"impl-Sub-for-UVec4"],[7611,"impl-SubAssign-for-UVec2"],[7612,"impl-SubAssign%3Cu32%3E-for-UVec2"],[7613,"impl-SubAssign%3Cu32%3E-for-UVec3"],[7614,"impl-SubAssign-for-UVec3"],[7615,"impl-SubAssign-for-UVec4"],[7616,"impl-SubAssign%3Cu32%3E-for-UVec4"],[7617,"impl-Sum%3C%26UVec2%3E-for-UVec2"],[7618,"impl-Sum-for-UVec2"],[7619,"impl-Sum%3C%26UVec3%3E-for-UVec3"],[7620,"impl-Sum-for-UVec3"],[7621,"impl-Sum-for-UVec4"],[7622,"impl-Sum%3C%26UVec4%3E-for-UVec4"],[7634,"impl-TryFrom%3CU64Vec2%3E-for-UVec2"],[7635,"impl-TryFrom%3CIVec2%3E-for-UVec2"],[7637,"impl-TryFrom%3CI16Vec2%3E-for-UVec2"],[7638,"impl-TryFrom%3CI64Vec2%3E-for-UVec2"],[7640,"impl-TryFrom%3CIVec3%3E-for-UVec3"],[7641,"impl-TryFrom%3CI64Vec3%3E-for-UVec3"],[7642,"impl-TryFrom%3CI16Vec3%3E-for-UVec3"],[7643,"impl-TryFrom%3CU64Vec3%3E-for-UVec3"],[7644,"impl-TryFrom%3CIVec4%3E-for-UVec4"],[7645,"impl-TryFrom%3CU64Vec4%3E-for-UVec4"],[7646,"impl-TryFrom%3CI16Vec4%3E-for-UVec4"],[7648,"impl-TryFrom%3CI64Vec4%3E-for-UVec4"],[8190,"impl-Add-for-U64Vec2"],[8191,"impl-Add%3Cu64%3E-for-U64Vec2"],[8192,"impl-Add%3Cu64%3E-for-U64Vec3"],[8193,"impl-Add-for-U64Vec3"],[8194,"impl-Add-for-U64Vec4"],[8195,"impl-Add%3Cu64%3E-for-U64Vec4"],[8196,"impl-AddAssign%3Cu64%3E-for-U64Vec2"],[8197,"impl-AddAssign-for-U64Vec2"],[8198,"impl-AddAssign%3Cu64%3E-for-U64Vec3"],[8199,"impl-AddAssign-for-U64Vec3"],[8200,"impl-AddAssign-for-U64Vec4"],[8201,"impl-AddAssign%3Cu64%3E-for-U64Vec4"],[8230,"impl-BitAnd%3Cu64%3E-for-U64Vec2"],[8231,"impl-BitAnd-for-U64Vec2"],[8232,"impl-BitAnd%3Cu64%3E-for-U64Vec3"],[8233,"impl-BitAnd-for-U64Vec3"],[8234,"impl-BitAnd-for-U64Vec4"],[8235,"impl-BitAnd%3Cu64%3E-for-U64Vec4"],[8236,"impl-BitOr%3Cu64%3E-for-U64Vec2"],[8237,"impl-BitOr-for-U64Vec2"],[8238,"impl-BitOr%3Cu64%3E-for-U64Vec3"],[8239,"impl-BitOr-for-U64Vec3"],[8240,"impl-BitOr-for-U64Vec4"],[8241,"impl-BitOr%3Cu64%3E-for-U64Vec4"],[8242,"impl-BitXor-for-U64Vec2"],[8243,"impl-BitXor%3Cu64%3E-for-U64Vec2"],[8244,"impl-BitXor%3Cu64%3E-for-U64Vec3"],[8245,"impl-BitXor-for-U64Vec3"],[8246,"impl-BitXor-for-U64Vec4"],[8247,"impl-BitXor%3Cu64%3E-for-U64Vec4"],[8285,"impl-Div%3Cu64%3E-for-U64Vec2"],[8286,"impl-Div-for-U64Vec2"],[8287,"impl-Div-for-U64Vec3"],[8288,"impl-Div%3Cu64%3E-for-U64Vec3"],[8289,"impl-Div-for-U64Vec4"],[8290,"impl-Div%3Cu64%3E-for-U64Vec4"],[8291,"impl-DivAssign%3Cu64%3E-for-U64Vec2"],[8292,"impl-DivAssign-for-U64Vec2"],[8293,"impl-DivAssign-for-U64Vec3"],[8294,"impl-DivAssign%3Cu64%3E-for-U64Vec3"],[8295,"impl-DivAssign%3Cu64%3E-for-U64Vec4"],[8296,"impl-DivAssign-for-U64Vec4"],[8308,"impl-Debug-for-U64Vec2"],[8309,"impl-Display-for-U64Vec2"],[8310,"impl-Debug-for-U64Vec3"],[8311,"impl-Display-for-U64Vec3"],[8312,"impl-Display-for-U64Vec4"],[8313,"impl-Debug-for-U64Vec4"],[8314,"impl-From%3C%5Bu64;+2%5D%3E-for-U64Vec2"],[8315,"impl-From%3CU16Vec2%3E-for-U64Vec2"],[8317,"impl-From%3CUVec2%3E-for-U64Vec2"],[8318,"impl-From%3C(u64,+u64)%3E-for-U64Vec2"],[8319,"impl-From%3C(u64,+u64,+u64)%3E-for-U64Vec3"],[8320,"impl-From%3C(U64Vec2,+u64)%3E-for-U64Vec3"],[8322,"impl-From%3C%5Bu64;+3%5D%3E-for-U64Vec3"],[8323,"impl-From%3CUVec3%3E-for-U64Vec3"],[8324,"impl-From%3CU16Vec3%3E-for-U64Vec3"],[8325,"impl-From%3C%5Bu64;+4%5D%3E-for-U64Vec4"],[8326,"impl-From%3CU16Vec4%3E-for-U64Vec4"],[8327,"impl-From%3C(u64,+u64,+u64,+u64)%3E-for-U64Vec4"],[8328,"impl-From%3C(u64,+U64Vec3)%3E-for-U64Vec4"],[8330,"impl-From%3CUVec4%3E-for-U64Vec4"],[8331,"impl-From%3C(U64Vec3,+u64)%3E-for-U64Vec4"],[8332,"impl-From%3C(U64Vec2,+u64,+u64)%3E-for-U64Vec4"],[8333,"impl-From%3C(U64Vec2,+U64Vec2)%3E-for-U64Vec4"],[8367,"impl-Mul-for-U64Vec2"],[8368,"impl-Mul%3Cu64%3E-for-U64Vec2"],[8369,"impl-Mul-for-U64Vec3"],[8370,"impl-Mul%3Cu64%3E-for-U64Vec3"],[8371,"impl-Mul%3Cu64%3E-for-U64Vec4"],[8372,"impl-Mul-for-U64Vec4"],[8373,"impl-MulAssign%3Cu64%3E-for-U64Vec2"],[8374,"impl-MulAssign-for-U64Vec2"],[8375,"impl-MulAssign%3Cu64%3E-for-U64Vec3"],[8376,"impl-MulAssign-for-U64Vec3"],[8377,"impl-MulAssign-for-U64Vec4"],[8378,"impl-MulAssign%3Cu64%3E-for-U64Vec4"],[8385,"impl-Product-for-U64Vec2"],[8386,"impl-Product%3C%26U64Vec2%3E-for-U64Vec2"],[8387,"impl-Product-for-U64Vec3"],[8388,"impl-Product%3C%26U64Vec3%3E-for-U64Vec3"],[8389,"impl-Product%3C%26U64Vec4%3E-for-U64Vec4"],[8390,"impl-Product-for-U64Vec4"],[8391,"impl-Rem%3Cu64%3E-for-U64Vec2"],[8392,"impl-Rem-for-U64Vec2"],[8393,"impl-Rem-for-U64Vec3"],[8394,"impl-Rem%3Cu64%3E-for-U64Vec3"],[8395,"impl-Rem-for-U64Vec4"],[8396,"impl-Rem%3Cu64%3E-for-U64Vec4"],[8397,"impl-RemAssign-for-U64Vec2"],[8398,"impl-RemAssign%3Cu64%3E-for-U64Vec2"],[8399,"impl-RemAssign%3Cu64%3E-for-U64Vec3"],[8400,"impl-RemAssign-for-U64Vec3"],[8401,"impl-RemAssign%3Cu64%3E-for-U64Vec4"],[8402,"impl-RemAssign-for-U64Vec4"],[8418,"impl-Shl%3CUVec2%3E-for-U64Vec2"],[8419,"impl-Shl%3Ci16%3E-for-U64Vec2"],[8420,"impl-Shl%3Ci64%3E-for-U64Vec2"],[8421,"impl-Shl%3Cu64%3E-for-U64Vec2"],[8422,"impl-Shl%3Cu16%3E-for-U64Vec2"],[8423,"impl-Shl%3Ci8%3E-for-U64Vec2"],[8424,"impl-Shl%3Cu32%3E-for-U64Vec2"],[8425,"impl-Shl%3CIVec2%3E-for-U64Vec2"],[8426,"impl-Shl%3Ci32%3E-for-U64Vec2"],[8427,"impl-Shl%3Cu8%3E-for-U64Vec2"],[8428,"impl-Shl%3Ci64%3E-for-U64Vec3"],[8429,"impl-Shl%3CIVec3%3E-for-U64Vec3"],[8430,"impl-Shl%3Ci32%3E-for-U64Vec3"],[8431,"impl-Shl%3Cu64%3E-for-U64Vec3"],[8432,"impl-Shl%3Cu32%3E-for-U64Vec3"],[8433,"impl-Shl%3Cu8%3E-for-U64Vec3"],[8434,"impl-Shl%3Cu16%3E-for-U64Vec3"],[8435,"impl-Shl%3Ci8%3E-for-U64Vec3"],[8436,"impl-Shl%3CUVec3%3E-for-U64Vec3"],[8437,"impl-Shl%3Ci16%3E-for-U64Vec3"],[8438,"impl-Shl%3Ci8%3E-for-U64Vec4"],[8439,"impl-Shl%3Cu32%3E-for-U64Vec4"],[8440,"impl-Shl%3Ci32%3E-for-U64Vec4"],[8441,"impl-Shl%3Cu64%3E-for-U64Vec4"],[8442,"impl-Shl%3Cu8%3E-for-U64Vec4"],[8443,"impl-Shl%3Ci64%3E-for-U64Vec4"],[8444,"impl-Shl%3Cu16%3E-for-U64Vec4"],[8445,"impl-Shl%3CUVec4%3E-for-U64Vec4"],[8446,"impl-Shl%3CIVec4%3E-for-U64Vec4"],[8447,"impl-Shl%3Ci16%3E-for-U64Vec4"],[8448,"impl-Shr%3Cu64%3E-for-U64Vec2"],[8449,"impl-Shr%3Ci16%3E-for-U64Vec2"],[8450,"impl-Shr%3Cu16%3E-for-U64Vec2"],[8451,"impl-Shr%3Cu8%3E-for-U64Vec2"],[8452,"impl-Shr%3Ci64%3E-for-U64Vec2"],[8453,"impl-Shr%3CUVec2%3E-for-U64Vec2"],[8454,"impl-Shr%3Cu32%3E-for-U64Vec2"],[8455,"impl-Shr%3Ci32%3E-for-U64Vec2"],[8456,"impl-Shr%3Ci8%3E-for-U64Vec2"],[8457,"impl-Shr%3CIVec2%3E-for-U64Vec2"],[8458,"impl-Shr%3CIVec3%3E-for-U64Vec3"],[8459,"impl-Shr%3Cu16%3E-for-U64Vec3"],[8460,"impl-Shr%3Ci64%3E-for-U64Vec3"],[8461,"impl-Shr%3Ci8%3E-for-U64Vec3"],[8462,"impl-Shr%3Ci32%3E-for-U64Vec3"],[8463,"impl-Shr%3CUVec3%3E-for-U64Vec3"],[8464,"impl-Shr%3Cu64%3E-for-U64Vec3"],[8465,"impl-Shr%3Cu8%3E-for-U64Vec3"],[8466,"impl-Shr%3Cu32%3E-for-U64Vec3"],[8467,"impl-Shr%3Ci16%3E-for-U64Vec3"],[8468,"impl-Shr%3Ci64%3E-for-U64Vec4"],[8469,"impl-Shr%3Ci32%3E-for-U64Vec4"],[8470,"impl-Shr%3Cu16%3E-for-U64Vec4"],[8471,"impl-Shr%3Ci16%3E-for-U64Vec4"],[8472,"impl-Shr%3CIVec4%3E-for-U64Vec4"],[8473,"impl-Shr%3CUVec4%3E-for-U64Vec4"],[8474,"impl-Shr%3Ci8%3E-for-U64Vec4"],[8475,"impl-Shr%3Cu64%3E-for-U64Vec4"],[8476,"impl-Shr%3Cu8%3E-for-U64Vec4"],[8477,"impl-Shr%3Cu32%3E-for-U64Vec4"],[8481,"impl-Sub%3Cu64%3E-for-U64Vec2"],[8482,"impl-Sub-for-U64Vec2"],[8483,"impl-Sub-for-U64Vec3"],[8484,"impl-Sub%3Cu64%3E-for-U64Vec3"],[8485,"impl-Sub%3Cu64%3E-for-U64Vec4"],[8486,"impl-Sub-for-U64Vec4"],[8487,"impl-SubAssign-for-U64Vec2"],[8488,"impl-SubAssign%3Cu64%3E-for-U64Vec2"],[8489,"impl-SubAssign-for-U64Vec3"],[8490,"impl-SubAssign%3Cu64%3E-for-U64Vec3"],[8491,"impl-SubAssign%3Cu64%3E-for-U64Vec4"],[8492,"impl-SubAssign-for-U64Vec4"],[8493,"impl-Sum-for-U64Vec2"],[8494,"impl-Sum%3C%26U64Vec2%3E-for-U64Vec2"],[8495,"impl-Sum-for-U64Vec3"],[8496,"impl-Sum%3C%26U64Vec3%3E-for-U64Vec3"],[8497,"impl-Sum-for-U64Vec4"],[8498,"impl-Sum%3C%26U64Vec4%3E-for-U64Vec4"],[8510,"impl-TryFrom%3CI16Vec2%3E-for-U64Vec2"],[8511,"impl-TryFrom%3CI64Vec2%3E-for-U64Vec2"],[8512,"impl-TryFrom%3CIVec2%3E-for-U64Vec2"],[8515,"impl-TryFrom%3CI16Vec3%3E-for-U64Vec3"],[8516,"impl-TryFrom%3CI64Vec3%3E-for-U64Vec3"],[8517,"impl-TryFrom%3CIVec3%3E-for-U64Vec3"],[8518,"impl-TryFrom%3CIVec4%3E-for-U64Vec4"],[8520,"impl-TryFrom%3CI64Vec4%3E-for-U64Vec4"],[8521,"impl-TryFrom%3CI16Vec4%3E-for-U64Vec4"]],"a":{"cross":[984,2486,3444,4359,5274],"determinant":[984,2486,3444,4359,5274],"magnitude":[834,835,836,837,838,2374,2375,2376,2377],"magnitude2":[844,845,846,847,848,2382,2383,2384,2385,3407,3408,3409,4322,4323,4324,5237,5238,5239,6600,6601,6602,7476,7477,7478,8352,8353,8354],"mix":[849,850,851,852,853,2386,2387,2388,2389],"scale":[698,699,700,701,2266,2267,2268],"wedge":[984,2486,3444,4359,5274]}}],\
["mtg_rust",{"doc":"The rust crate for the Mini Tardis Games addon of the …","t":"PPFGPPKPPPGPPPPPPFGPPPPNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNQNNNNNNNNHHMNNNNNNNNNNNNNNNNNNNNNNNN","n":["Ambient","Blocks","Canvas","ClickType","Debug","Error","Game","Hostile","Info","Left","LogLevel","Master","Music","Neutral","Players","Records","Right","Screen","SoundCategory","Trace","Voice","Warn","Weather","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","draw","draw_inbuilt_sprite","draw_text","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","game_impl","get_height","get_raw_color","get_width","into","into","into","into","into","log","nano_time","on_click","partial_cmp","play_sound","random_i32","set_pixel_argb","set_pixel_raw","set_pixel_rgb","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"mtg_rust"],[90,"core::cmp"],[91,"core::fmt"],[92,"core::fmt"],[93,"core::result"],[94,"core::any"]],"d":["","","A canvas that can be manipulated via various methods and …","Indicates the type of a <code>Game::on_click</code> callback, usually …","","","","","","","A level of importance for the <code>log</code> function. Analogous to …","","","","","","","A (console) screen that contains methods that can be …","A category for a certain sound event, used by …","","","","","","","","","","","","","","","","","","","","","","","Draw a sprite at the certain <code>x</code> and <code>y</code> coordinates. …","Draw text at the certain <code>x</code> and <code>y</code> coordinates. Analogous to …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Connects a type implementing <code>Game</code> with the underlying WASM …","Get the height of the canvas, usually 96. Analogous to the …","Get the raw color value at the certain <code>x</code> and <code>y</code> coordinates.","Get the width of the canvas, usually 128. Analogous to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Logs a message. Forwards to the mod’s SLF4J <code>Logger</code>’s …","Returns an arbitrary nanosecond value to measure elapsed …","","","Plays a sound at the screen’s position with the …","Returns a pseudorandom <code>i32</code> using the block entities’ …","Set the ARGB color value at the certain <code>x</code> and <code>y</code> …","Set the raw color value at the certain <code>x</code> and <code>y</code> coordinates.","Set the RGB color value at the certain <code>x</code> and <code>y</code> coordinates.","","","","","","","","","","","","","","","","","",""],"i":[2,2,0,0,1,1,0,2,1,3,0,2,2,2,2,2,3,0,0,1,2,1,2,7,8,1,2,3,7,8,1,2,3,1,2,3,1,2,3,1,6,8,8,1,2,3,1,2,3,7,8,1,2,3,0,8,8,8,7,8,1,2,3,0,0,6,1,7,7,8,8,8,1,2,3,7,8,1,2,3,7,8,1,2,3,7,8,1,2,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[1,1],5],[[6,7,8],4],[[8,9,9,10],4],[[8,9,9,10,9,9],4],[[1,1],11],[[2,2],11],[[3,3],11],[[1,12],13],[[2,12],13],[[3,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[8,9],[[8,9,9],9],[8,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[10,1],4],[[],14],[[6,7,3,9,9],4],[[1,1],[[15,[5]]]],[[7,10,2,16,16],4],[7,9],[[8,9,9,9],4],[[8,9,9,9],4],[[8,9,9,9],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]]],"c":[],"p":[[6,"LogLevel",0],[6,"SoundCategory",0],[6,"ClickType",0],[1,"tuple"],[6,"Ordering",90],[10,"Game",0],[5,"Screen",0],[5,"Canvas",0],[1,"i32"],[1,"str"],[1,"bool"],[5,"Formatter",91],[8,"Result",91],[1,"i64"],[6,"Option",92],[1,"f32"],[6,"Result",93],[5,"TypeId",94]],"b":[]}],\
["raytracer",{"doc":"","t":"FNNNNNNHHHNNNN","n":["RayTracer","borrow","borrow_mut","default","draw","from","into","mtg_alloc_data","mtg_draw","mtg_on_click","on_click","try_from","try_into","type_id"],"q":[[0,"raytracer"],[14,"mtg_rust"],[15,"mtg_rust"],[16,"core::any"]],"d":["","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,1,1,1,1,1,1,0,0,0,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[1,2,3],4],[-1,-1,[]],[-1,-2,[],[]],[[],5],[5,4],[[5,5,5,5],4],[[1,2,6,5,5],4],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]]],"c":[],"p":[[5,"RayTracer",0],[5,"Screen",14],[5,"Canvas",14],[1,"tuple"],[1,"i32"],[6,"ClickType",14],[6,"Result",15],[5,"TypeId",16]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
